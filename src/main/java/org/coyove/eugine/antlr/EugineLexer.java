// Generated from Eugine.g by ANTLR 4.5.3

package org.coyove.eugine.antlr;

import org.coyove.eugine.util.*;
import org.coyove.eugine.base.*;
import org.coyove.eugine.value.*;
import org.coyove.eugine.core.*;
import org.coyove.eugine.library.*;
import org.coyove.eugine.parser.Atom;
import java.util.HashMap;
import org.apache.commons.lang3.ClassUtils;

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class EugineLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.5.3", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, Var=34, Def=35, For=36, If=37, Switch=38, Else=39, 
		Enter=40, Catch=41, Clone=42, New=43, Static=44, Do=45, Add=46, Sub=47, 
		Not=48, AryOp=49, Integer=50, Double=51, NEWLINE=52, WS=53, Semi=54, Identifier=55, 
		JavaFullName=56, Letter=57, BlockComment=58, LineComment=59, RawString=60, 
		StringLiteral=61;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
		"Var", "Def", "For", "If", "Switch", "Else", "Enter", "Catch", "Clone", 
		"New", "Static", "Do", "Add", "Sub", "Not", "AryOp", "Integer", "Double", 
		"NEWLINE", "WS", "Semi", "Identifier", "JavaFullName", "Letter", "BlockComment", 
		"LineComment", "RawString", "StringLiteral", "SCharSequence", "SChar"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'{'", "'}'", "'import'", "'.'", "'('", "')'", "'='", "','", "':'", 
		"'['", "']'", "'=>'", "'::'", "'++'", "'--'", "'*'", "'/'", "'%'", "'+.'", 
		"'<'", "'>'", "'<='", "'>='", "'=='", "'!='", "'&&'", "'||'", "'+='", 
		"'-='", "'*='", "'/='", "'..'", "'...'", "'var'", "'def'", null, "'if'", 
		"'switch'", "'else'", "'enter'", "'catch'", "'clone'", "'new'", "'static'", 
		"'do'", "'+'", "'-'", "'!'", null, null, null, null, null, "';'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "Var", "Def", 
		"For", "If", "Switch", "Else", "Enter", "Catch", "Clone", "New", "Static", 
		"Do", "Add", "Sub", "Not", "AryOp", "Integer", "Double", "NEWLINE", "WS", 
		"Semi", "Identifier", "JavaFullName", "Letter", "BlockComment", "LineComment", 
		"RawString", "StringLiteral"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public EugineLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Eugine.g"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2?\u01c0\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\3\2\3\2\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\5\3\5"+
		"\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r\3\r"+
		"\3\16\3\16\3\16\3\17\3\17\3\17\3\20\3\20\3\20\3\21\3\21\3\22\3\22\3\23"+
		"\3\23\3\24\3\24\3\24\3\25\3\25\3\26\3\26\3\27\3\27\3\27\3\30\3\30\3\30"+
		"\3\31\3\31\3\31\3\32\3\32\3\32\3\33\3\33\3\33\3\34\3\34\3\34\3\35\3\35"+
		"\3\35\3\36\3\36\3\36\3\37\3\37\3\37\3 \3 \3 \3!\3!\3!\3\"\3\"\3\"\3\""+
		"\3#\3#\3#\3#\3$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3%\5%\u00ea\n%\3&\3&\3&\3\'"+
		"\3\'\3\'\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3(\3)\3)\3)\3)\3)\3)\3*\3*\3*\3*"+
		"\3*\3*\3+\3+\3+\3+\3+\3+\3,\3,\3,\3,\3-\3-\3-\3-\3-\3-\3-\3.\3.\3.\3/"+
		"\3/\3\60\3\60\3\61\3\61\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3"+
		"\62\5\62\u012b\n\62\3\63\6\63\u012e\n\63\r\63\16\63\u012f\3\64\6\64\u0133"+
		"\n\64\r\64\16\64\u0134\3\64\3\64\6\64\u0139\n\64\r\64\16\64\u013a\3\64"+
		"\6\64\u013e\n\64\r\64\16\64\u013f\3\64\3\64\6\64\u0144\n\64\r\64\16\64"+
		"\u0145\3\64\3\64\5\64\u014a\n\64\3\64\6\64\u014d\n\64\r\64\16\64\u014e"+
		"\5\64\u0151\n\64\3\65\5\65\u0154\n\65\3\65\3\65\3\65\3\65\3\66\6\66\u015b"+
		"\n\66\r\66\16\66\u015c\3\66\3\66\3\67\3\67\38\38\58\u0165\n8\38\38\78"+
		"\u0169\n8\f8\168\u016c\138\38\38\38\58\u0171\n8\39\39\39\79\u0176\n9\f"+
		"9\169\u0179\139\39\39\59\u017d\n9\39\39\39\59\u0182\n9\3:\3:\3;\3;\3;"+
		"\3;\7;\u018a\n;\f;\16;\u018d\13;\3;\3;\3;\3;\3;\3<\3<\3<\3<\7<\u0198\n"+
		"<\f<\16<\u019b\13<\3<\3<\3=\3=\3=\3=\3=\3=\7=\u01a5\n=\f=\16=\u01a8\13"+
		"=\3=\3=\3>\3>\5>\u01ae\n>\3>\3>\3?\6?\u01b3\n?\r?\16?\u01b4\3@\3@\3@\3"+
		"@\3@\3@\3@\3@\5@\u01bf\n@\3\u018b\2A\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21"+
		"\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30"+
		"/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.["+
		"/]\60_\61a\62c\63e\64g\65i\66k\67m8o9q:s;u<w=y>{?}\2\177\2\3\2\16\6\2"+
		"\'\',,//\61\61\4\2>>@@\3\2\62;\4\2GGgg\5\2--//^^\4\2\13\13\"\"\4\2\62"+
		";aa\4\2C\\c|\4\2\f\f\17\17\3\2$$\6\2\f\f\17\17$$^^\f\2$$))AA^^cdhhppt"+
		"tvvxx\u01dd\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2"+
		"\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27"+
		"\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2"+
		"\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2"+
		"\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2"+
		"\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2"+
		"\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S"+
		"\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2"+
		"\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\2k\3\2\2\2"+
		"\2m\3\2\2\2\2o\3\2\2\2\2q\3\2\2\2\2s\3\2\2\2\2u\3\2\2\2\2w\3\2\2\2\2y"+
		"\3\2\2\2\2{\3\2\2\2\3\u0081\3\2\2\2\5\u0083\3\2\2\2\7\u0085\3\2\2\2\t"+
		"\u008c\3\2\2\2\13\u008e\3\2\2\2\r\u0090\3\2\2\2\17\u0092\3\2\2\2\21\u0094"+
		"\3\2\2\2\23\u0096\3\2\2\2\25\u0098\3\2\2\2\27\u009a\3\2\2\2\31\u009c\3"+
		"\2\2\2\33\u009f\3\2\2\2\35\u00a2\3\2\2\2\37\u00a5\3\2\2\2!\u00a8\3\2\2"+
		"\2#\u00aa\3\2\2\2%\u00ac\3\2\2\2\'\u00ae\3\2\2\2)\u00b1\3\2\2\2+\u00b3"+
		"\3\2\2\2-\u00b5\3\2\2\2/\u00b8\3\2\2\2\61\u00bb\3\2\2\2\63\u00be\3\2\2"+
		"\2\65\u00c1\3\2\2\2\67\u00c4\3\2\2\29\u00c7\3\2\2\2;\u00ca\3\2\2\2=\u00cd"+
		"\3\2\2\2?\u00d0\3\2\2\2A\u00d3\3\2\2\2C\u00d6\3\2\2\2E\u00da\3\2\2\2G"+
		"\u00de\3\2\2\2I\u00e9\3\2\2\2K\u00eb\3\2\2\2M\u00ee\3\2\2\2O\u00f5\3\2"+
		"\2\2Q\u00fa\3\2\2\2S\u0100\3\2\2\2U\u0106\3\2\2\2W\u010c\3\2\2\2Y\u0110"+
		"\3\2\2\2[\u0117\3\2\2\2]\u011a\3\2\2\2_\u011c\3\2\2\2a\u011e\3\2\2\2c"+
		"\u012a\3\2\2\2e\u012d\3\2\2\2g\u0150\3\2\2\2i\u0153\3\2\2\2k\u015a\3\2"+
		"\2\2m\u0160\3\2\2\2o\u0164\3\2\2\2q\u0172\3\2\2\2s\u0183\3\2\2\2u\u0185"+
		"\3\2\2\2w\u0193\3\2\2\2y\u019e\3\2\2\2{\u01ab\3\2\2\2}\u01b2\3\2\2\2\177"+
		"\u01be\3\2\2\2\u0081\u0082\7}\2\2\u0082\4\3\2\2\2\u0083\u0084\7\177\2"+
		"\2\u0084\6\3\2\2\2\u0085\u0086\7k\2\2\u0086\u0087\7o\2\2\u0087\u0088\7"+
		"r\2\2\u0088\u0089\7q\2\2\u0089\u008a\7t\2\2\u008a\u008b\7v\2\2\u008b\b"+
		"\3\2\2\2\u008c\u008d\7\60\2\2\u008d\n\3\2\2\2\u008e\u008f\7*\2\2\u008f"+
		"\f\3\2\2\2\u0090\u0091\7+\2\2\u0091\16\3\2\2\2\u0092\u0093\7?\2\2\u0093"+
		"\20\3\2\2\2\u0094\u0095\7.\2\2\u0095\22\3\2\2\2\u0096\u0097\7<\2\2\u0097"+
		"\24\3\2\2\2\u0098\u0099\7]\2\2\u0099\26\3\2\2\2\u009a\u009b\7_\2\2\u009b"+
		"\30\3\2\2\2\u009c\u009d\7?\2\2\u009d\u009e\7@\2\2\u009e\32\3\2\2\2\u009f"+
		"\u00a0\7<\2\2\u00a0\u00a1\7<\2\2\u00a1\34\3\2\2\2\u00a2\u00a3\7-\2\2\u00a3"+
		"\u00a4\7-\2\2\u00a4\36\3\2\2\2\u00a5\u00a6\7/\2\2\u00a6\u00a7\7/\2\2\u00a7"+
		" \3\2\2\2\u00a8\u00a9\7,\2\2\u00a9\"\3\2\2\2\u00aa\u00ab\7\61\2\2\u00ab"+
		"$\3\2\2\2\u00ac\u00ad\7\'\2\2\u00ad&\3\2\2\2\u00ae\u00af\7-\2\2\u00af"+
		"\u00b0\7\60\2\2\u00b0(\3\2\2\2\u00b1\u00b2\7>\2\2\u00b2*\3\2\2\2\u00b3"+
		"\u00b4\7@\2\2\u00b4,\3\2\2\2\u00b5\u00b6\7>\2\2\u00b6\u00b7\7?\2\2\u00b7"+
		".\3\2\2\2\u00b8\u00b9\7@\2\2\u00b9\u00ba\7?\2\2\u00ba\60\3\2\2\2\u00bb"+
		"\u00bc\7?\2\2\u00bc\u00bd\7?\2\2\u00bd\62\3\2\2\2\u00be\u00bf\7#\2\2\u00bf"+
		"\u00c0\7?\2\2\u00c0\64\3\2\2\2\u00c1\u00c2\7(\2\2\u00c2\u00c3\7(\2\2\u00c3"+
		"\66\3\2\2\2\u00c4\u00c5\7~\2\2\u00c5\u00c6\7~\2\2\u00c68\3\2\2\2\u00c7"+
		"\u00c8\7-\2\2\u00c8\u00c9\7?\2\2\u00c9:\3\2\2\2\u00ca\u00cb\7/\2\2\u00cb"+
		"\u00cc\7?\2\2\u00cc<\3\2\2\2\u00cd\u00ce\7,\2\2\u00ce\u00cf\7?\2\2\u00cf"+
		">\3\2\2\2\u00d0\u00d1\7\61\2\2\u00d1\u00d2\7?\2\2\u00d2@\3\2\2\2\u00d3"+
		"\u00d4\7\60\2\2\u00d4\u00d5\7\60\2\2\u00d5B\3\2\2\2\u00d6\u00d7\7\60\2"+
		"\2\u00d7\u00d8\7\60\2\2\u00d8\u00d9\7\60\2\2\u00d9D\3\2\2\2\u00da\u00db"+
		"\7x\2\2\u00db\u00dc\7c\2\2\u00dc\u00dd\7t\2\2\u00ddF\3\2\2\2\u00de\u00df"+
		"\7f\2\2\u00df\u00e0\7g\2\2\u00e0\u00e1\7h\2\2\u00e1H\3\2\2\2\u00e2\u00e3"+
		"\7h\2\2\u00e3\u00e4\7q\2\2\u00e4\u00ea\7t\2\2\u00e5\u00e6\7h\2\2\u00e6"+
		"\u00e7\7q\2\2\u00e7\u00e8\7t\2\2\u00e8\u00ea\7t\2\2\u00e9\u00e2\3\2\2"+
		"\2\u00e9\u00e5\3\2\2\2\u00eaJ\3\2\2\2\u00eb\u00ec\7k\2\2\u00ec\u00ed\7"+
		"h\2\2\u00edL\3\2\2\2\u00ee\u00ef\7u\2\2\u00ef\u00f0\7y\2\2\u00f0\u00f1"+
		"\7k\2\2\u00f1\u00f2\7v\2\2\u00f2\u00f3\7e\2\2\u00f3\u00f4\7j\2\2\u00f4"+
		"N\3\2\2\2\u00f5\u00f6\7g\2\2\u00f6\u00f7\7n\2\2\u00f7\u00f8\7u\2\2\u00f8"+
		"\u00f9\7g\2\2\u00f9P\3\2\2\2\u00fa\u00fb\7g\2\2\u00fb\u00fc\7p\2\2\u00fc"+
		"\u00fd\7v\2\2\u00fd\u00fe\7g\2\2\u00fe\u00ff\7t\2\2\u00ffR\3\2\2\2\u0100"+
		"\u0101\7e\2\2\u0101\u0102\7c\2\2\u0102\u0103\7v\2\2\u0103\u0104\7e\2\2"+
		"\u0104\u0105\7j\2\2\u0105T\3\2\2\2\u0106\u0107\7e\2\2\u0107\u0108\7n\2"+
		"\2\u0108\u0109\7q\2\2\u0109\u010a\7p\2\2\u010a\u010b\7g\2\2\u010bV\3\2"+
		"\2\2\u010c\u010d\7p\2\2\u010d\u010e\7g\2\2\u010e\u010f\7y\2\2\u010fX\3"+
		"\2\2\2\u0110\u0111\7u\2\2\u0111\u0112\7v\2\2\u0112\u0113\7c\2\2\u0113"+
		"\u0114\7v\2\2\u0114\u0115\7k\2\2\u0115\u0116\7e\2\2\u0116Z\3\2\2\2\u0117"+
		"\u0118\7f\2\2\u0118\u0119\7q\2\2\u0119\\\3\2\2\2\u011a\u011b\7-\2\2\u011b"+
		"^\3\2\2\2\u011c\u011d\7/\2\2\u011d`\3\2\2\2\u011e\u011f\7#\2\2\u011fb"+
		"\3\2\2\2\u0120\u012b\t\2\2\2\u0121\u0122\7?\2\2\u0122\u012b\7?\2\2\u0123"+
		"\u0124\7#\2\2\u0124\u012b\7?\2\2\u0125\u012b\t\3\2\2\u0126\u0127\7@\2"+
		"\2\u0127\u012b\7?\2\2\u0128\u0129\7>\2\2\u0129\u012b\7?\2\2\u012a\u0120"+
		"\3\2\2\2\u012a\u0121\3\2\2\2\u012a\u0123\3\2\2\2\u012a\u0125\3\2\2\2\u012a"+
		"\u0126\3\2\2\2\u012a\u0128\3\2\2\2\u012bd\3\2\2\2\u012c\u012e\t\4\2\2"+
		"\u012d\u012c\3\2\2\2\u012e\u012f\3\2\2\2\u012f\u012d\3\2\2\2\u012f\u0130"+
		"\3\2\2\2\u0130f\3\2\2\2\u0131\u0133\t\4\2\2\u0132\u0131\3\2\2\2\u0133"+
		"\u0134\3\2\2\2\u0134\u0132\3\2\2\2\u0134\u0135\3\2\2\2\u0135\u0136\3\2"+
		"\2\2\u0136\u0138\7\60\2\2\u0137\u0139\t\4\2\2\u0138\u0137\3\2\2\2\u0139"+
		"\u013a\3\2\2\2\u013a\u0138\3\2\2\2\u013a\u013b\3\2\2\2\u013b\u0151\3\2"+
		"\2\2\u013c\u013e\t\4\2\2\u013d\u013c\3\2\2\2\u013e\u013f\3\2\2\2\u013f"+
		"\u013d\3\2\2\2\u013f\u0140\3\2\2\2\u0140\u0141\3\2\2\2\u0141\u0143\7\60"+
		"\2\2\u0142\u0144\t\4\2\2\u0143\u0142\3\2\2\2\u0144\u0145\3\2\2\2\u0145"+
		"\u0143\3\2\2\2\u0145\u0146\3\2\2\2\u0146\u0147\3\2\2\2\u0147\u0149\t\5"+
		"\2\2\u0148\u014a\t\6\2\2\u0149\u0148\3\2\2\2\u0149\u014a\3\2\2\2\u014a"+
		"\u014c\3\2\2\2\u014b\u014d\t\4\2\2\u014c\u014b\3\2\2\2\u014d\u014e\3\2"+
		"\2\2\u014e\u014c\3\2\2\2\u014e\u014f\3\2\2\2\u014f\u0151\3\2\2\2\u0150"+
		"\u0132\3\2\2\2\u0150\u013d\3\2\2\2\u0151h\3\2\2\2\u0152\u0154\7\17\2\2"+
		"\u0153\u0152\3\2\2\2\u0153\u0154\3\2\2\2\u0154\u0155\3\2\2\2\u0155\u0156"+
		"\7\f\2\2\u0156\u0157\3\2\2\2\u0157\u0158\b\65\2\2\u0158j\3\2\2\2\u0159"+
		"\u015b\t\7\2\2\u015a\u0159\3\2\2\2\u015b\u015c\3\2\2\2\u015c\u015a\3\2"+
		"\2\2\u015c\u015d\3\2\2\2\u015d\u015e\3\2\2\2\u015e\u015f\b\66\2\2\u015f"+
		"l\3\2\2\2\u0160\u0161\7=\2\2\u0161n\3\2\2\2\u0162\u0165\5s:\2\u0163\u0165"+
		"\7a\2\2\u0164\u0162\3\2\2\2\u0164\u0163\3\2\2\2\u0165\u016a\3\2\2\2\u0166"+
		"\u0169\5s:\2\u0167\u0169\t\b\2\2\u0168\u0166\3\2\2\2\u0168\u0167\3\2\2"+
		"\2\u0169\u016c\3\2\2\2\u016a\u0168\3\2\2\2\u016a\u016b\3\2\2\2\u016b\u0170"+
		"\3\2\2\2\u016c\u016a\3\2\2\2\u016d\u016e\7\60\2\2\u016e\u016f\7\60\2\2"+
		"\u016f\u0171\7\60\2\2\u0170\u016d\3\2\2\2\u0170\u0171\3\2\2\2\u0171p\3"+
		"\2\2\2\u0172\u0177\5o8\2\u0173\u0174\7^\2\2\u0174\u0176\5o8\2\u0175\u0173"+
		"\3\2\2\2\u0176\u0179\3\2\2\2\u0177\u0175\3\2\2\2\u0177\u0178\3\2\2\2\u0178"+
		"\u017c\3\2\2\2\u0179\u0177\3\2\2\2\u017a\u017b\7]\2\2\u017b\u017d\7_\2"+
		"\2\u017c\u017a\3\2\2\2\u017c\u017d\3\2\2\2\u017d\u0181\3\2\2\2\u017e\u017f"+
		"\7\60\2\2\u017f\u0180\7\60\2\2\u0180\u0182\7\60\2\2\u0181\u017e\3\2\2"+
		"\2\u0181\u0182\3\2\2\2\u0182r\3\2\2\2\u0183\u0184\t\t\2\2\u0184t\3\2\2"+
		"\2\u0185\u0186\7\61\2\2\u0186\u0187\7,\2\2\u0187\u018b\3\2\2\2\u0188\u018a"+
		"\13\2\2\2\u0189\u0188\3\2\2\2\u018a\u018d\3\2\2\2\u018b\u018c\3\2\2\2"+
		"\u018b\u0189\3\2\2\2\u018c\u018e\3\2\2\2\u018d\u018b\3\2\2\2\u018e\u018f"+
		"\7,\2\2\u018f\u0190\7\61\2\2\u0190\u0191\3\2\2\2\u0191\u0192\b;\2\2\u0192"+
		"v\3\2\2\2\u0193\u0194\7\61\2\2\u0194\u0195\7\61\2\2\u0195\u0199\3\2\2"+
		"\2\u0196\u0198\n\n\2\2\u0197\u0196\3\2\2\2\u0198\u019b\3\2\2\2\u0199\u0197"+
		"\3\2\2\2\u0199\u019a\3\2\2\2\u019a\u019c\3\2\2\2\u019b\u0199\3\2\2\2\u019c"+
		"\u019d\b<\2\2\u019dx\3\2\2\2\u019e\u019f\7B\2\2\u019f\u01a0\7$\2\2\u01a0"+
		"\u01a6\3\2\2\2\u01a1\u01a5\n\13\2\2\u01a2\u01a3\7$\2\2\u01a3\u01a5\7$"+
		"\2\2\u01a4\u01a1\3\2\2\2\u01a4\u01a2\3\2\2\2\u01a5\u01a8\3\2\2\2\u01a6"+
		"\u01a4\3\2\2\2\u01a6\u01a7\3\2\2\2\u01a7\u01a9\3\2\2\2\u01a8\u01a6\3\2"+
		"\2\2\u01a9\u01aa\7$\2\2\u01aaz\3\2\2\2\u01ab\u01ad\7$\2\2\u01ac\u01ae"+
		"\5}?\2\u01ad\u01ac\3\2\2\2\u01ad\u01ae\3\2\2\2\u01ae\u01af\3\2\2\2\u01af"+
		"\u01b0\7$\2\2\u01b0|\3\2\2\2\u01b1\u01b3\5\177@\2\u01b2\u01b1\3\2\2\2"+
		"\u01b3\u01b4\3\2\2\2\u01b4\u01b2\3\2\2\2\u01b4\u01b5\3\2\2\2\u01b5~\3"+
		"\2\2\2\u01b6\u01bf\n\f\2\2\u01b7\u01b8\7^\2\2\u01b8\u01bf\t\r\2\2\u01b9"+
		"\u01ba\7^\2\2\u01ba\u01bf\7\f\2\2\u01bb\u01bc\7^\2\2\u01bc\u01bd\7\17"+
		"\2\2\u01bd\u01bf\7\f\2\2\u01be\u01b6\3\2\2\2\u01be\u01b7\3\2\2\2\u01be"+
		"\u01b9\3\2\2\2\u01be\u01bb\3\2\2\2\u01bf\u0080\3\2\2\2\35\2\u00e9\u012a"+
		"\u012f\u0134\u013a\u013f\u0145\u0149\u014e\u0150\u0153\u015c\u0164\u0168"+
		"\u016a\u0170\u0177\u017c\u0181\u018b\u0199\u01a4\u01a6\u01ad\u01b4\u01be"+
		"\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}