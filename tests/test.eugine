; if you tend to use a var without assign a value to it, its value = null
; if you use a var with a "@" before its name (no space between), like @var-name, its value = "var-name" (string)

(println "Begin tests")
(println "Working under " ~path "\n")

; (set ~strict)

(var start)
[start = (time 1)]

(~include "util.eugine")

(println "== Mathematics ==")
(~include "math.lisp")

(println "\n== Lambda / Recursion ==")
(~include "lambda.lisp")
(~include "recursion.lisp")

(println "\n== Others ==")
(~include "others.eugine")

(~include "interop.eugine")
(~include "encap.eugine")

(println "\nFinish " assertions.total " tests in " (floor [(time 1) - start])
 	"ms, passed: " assertions.passed ", failed: " assertions.failed)

(defun cps (f)
    (lambda (args...)
        ((last args) (f (explode (init args))))))

(defun -. (args...) (- (explode args)))
(defun +. (args...) (+ (explode args)))
(defun ==. (args...) (== (explode args)))
(defun println. (args...) (println (explode args)))

(var -& (cps -.))
(var +& (cps +.))
(var ==& (cps ==.))

(defun add& (n k)
    (==& n 0 (lambda (b)
          (if b                    ; growing continuation
              (k 0)                ; in the recursive call
              (-& n 1 (lambda (nm1)
                       (add& nm1 (lambda (f)
                                        (+& n f k)))))))))


(add& 100 println.)