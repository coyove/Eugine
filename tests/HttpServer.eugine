def [Util.struct] HttpServer(addr, port, timeout) => {
    var listenAddress = addr
    var listenPort = port
    var readTimeout = timeout

    var routerGET = {}
    var routerPOST = {}
    var router404 = null

    def [Util.struct] this.HttpContext (socket) => {
        var responseSocket = socket
        var responseStream = socket::getOutputStream()

        var this.headers = {}

        def this.parsePostBody () => {
            var this.postParams = parsePairs(this.data, "&")
            if this.route != null {
                var parts = String.split(this.route, "\\?")

                if len(parts) == 2 {
                    var tmp = parsePairs(parts[1], "&")
                    for tmp do (k) => 
                        this.postParams[k] = tmp[k]

                    this.route = parts[0]
                }
            }
        }

        def this.parseCookies () =>
            var this.cookies = parsePairs(if (this.rawCookie) this.rawCookie else "", ";")

        def parsePairs (text, delim) => {
            var pairs = String.split(text, delim)
            var ret = {}
            for pairs do (pair) => {
                var kv = String.split(pair, "=")
                var key = String.trim(kv[0])
                if len(kv) == 2 {
                    ret[key] = Util.decodeURI(String.trim(kv[1]))
                } else if len(kv) == 1 && key != "" {
                    ret[key] = ""
                }
            }

            ret
        }

        def this.writeCommon(status, ctype) => {
            switch status do {
                404 => this.write("HTTP/1.1 404 Not Found\r\n")
                403 => this.write("HTTP/1.1 403 Forbidden\r\n")
                400 => this.write("HTTP/1.1 400 Bad Request\r\n")
                302 => this.write("HTTP/1.1 302 Found\r\n")
                301 => this.write("HTTP/1.1 301 Moved Permanently\r\n")
                _   => this.write("HTTP/1.1 200 OK\r\n")
            }

            switch ctype do {
                "css"   => this.writeHeader("Content-Type", "text/css; charset=utf-8")
                "js"    => this.writeHeader("Content-Type", "application/x-javascript; charset=utf-8")
                "plain" => this.writeHeader("Content-Type", "text/plain; charset=utf-8")
                "html"  => this.writeHeader("Content-Type", "text/html; charset=utf-8")
                "xml"   => this.writeHeader("Content-Type", "text/xml; charset=utf-8")
                "png"   => this.writeHeader("Content-Type", "image/png")
                "jpg"   => this.writeHeader("Content-Type", "image/jpg")
                _       => this.writeHeader("Content-Type", "application/octet-stream")
            }
        }

        def this.writeCookie(key, value, options) => {
            var payload = key + "=" + value

            for options do (k, v) =>
                switch k do {
                    "Expires" => {
                        payload += "; Expires=" + Time.utcFormat(Time.unix(0) + v * 1000)
                        payload += "; Max-Age=" + v
                    }
                    "HttpOnly" => {
                        payload += "; HttpOnly"
                    }
                    _ => {
                        payload += "; " + k + "=" + v
                    }
                }

            this.writeHeader("Set-Cookie", payload)
        }

        def this.writeHeader (key, value) =>
            this.writeBytes(buffer(key + ": " + value + "\r\n"))

        def this.write(text...) => {
            var tmp = clone ""
            for text do (t) => tmp <+ t

            this.writeBytes(buffer(tmp))
        }

        def this.eoh() =>
            this.writeBytes(buffer("\r\n"))

        def this.writeBytes(bytes) =>
            if !responseSocket::isClosed()
                responseStream:>write(bytes : byte[])

        def this.close() => {
            responseStream:>close()
            responseSocket:>close()
        }
    }

    def handle (client) => {
        client::setSoTimeout(readTimeout)
        var is = client::getInputStream()
        var context = _HttpServer.HttpContext(client)

        enter {
        var buf  = buffer(1024), 
            read = 0
        var totalRead    = 0
        var rawRequest   = ""
        var bodyLength   = 0
        var headerLength = 0
        var totalLength  = 0

        enter for read != -1 do () => {
            totalRead += (read = is::read(buf : byte[]))
            var output = new java/lang/String(buf : byte[], 0, read)
            rawRequest <+ output

            var m = String.match(rawRequest, @"(?i)content-length:\s?(\d+)")
            if len(m) > 0
                bodyLength = num(String.split(m[0].text, ":")[1]) // we found Content-Length header

            m = String.match(rawRequest, @"(\r\n\r\n)")
            if len(m) > 0
                totalLength = (headerLength = m[0].end) + bodyLength // we reach the end of HTTP request headers

            !(totalLength == totalRead || Util.isEndOfStream(rawRequest))
        } catch (e)
            if rawRequest != ""
                println("timeout:\n", e, "\n", rawRequest)

            // println(rawRequest)

        var requests = String.split(rawRequest, "\r\n")
        for requests do (request) => {
            var parts = String.split(request, " ")
            var p = null
            if len(parts) > 1
                switch p = parts[0]::toLowerCase() do {
                    "get" =>
                        var context.route = parts[1], context.method = "get"

                    "post" =>
                        var context.route = parts[1], context.method = "post"   

                    "cookie:" =>
                        var context.rawCookie = request[7..]

                    _ =>
                        context.headers[String.replace(p, ":", "")] = String.trim(request[len(parts[0])..])
                }
        }

        if !context.method 
            exit("invalid request (" + rawRequest + ")")

        var context.data = rawRequest[headerLength..]
        
        context.parsePostBody()
        context.parseCookies()

        switch context.method do {
            "get" => var rref = routerGET
            "post" => var rref = routerPOST
        }

        if context.method == "post" && context.headers["content-type"] != "application/x-www-form-urlencoded" {
            context.writeCommon(403, "plain")
            context.write("\r\n")
        } else {
            var found = false
            var tester = context.route
            if contains(rref, "_" + tester) {
                rref["_" + tester](context)
                found = true
            } else {
                for rref do (route, router) => {
                    if Util.startsWith(tester, route) {
                        found = true
                        router(context)
                        false
                    }
                }
            }

            if !found {
                if router404 == null {
                    context.writeCommon(404, "plain")
                    context.write("\r\n")
                } else {
                    router404(context)
                }
            }
        }

        // end of enter
        } catch(e) {
            println(e)
        } do {
            is:>close()
            context.close()
        }
    }

    def this.addRouter(method, route, router) => {
        switch method::toLowerCase() do {
            "get" => routerGET[route] = router
            "post" => routerPOST[route] = router
            "404" => router404 = router
        }
    }

    def this.start() => {
        var ss = new java/net/ServerSocket()
        ss:>bind(new java/net/InetSocketAddress(listenAddress, listenPort): java/net/SocketAddress)

        for true do () => {
            var client = ss::accept()
            handle#(client)

            /* DO NOT write "handle#(ss::accept())" because it
               will continously create new thread without being blocked and cause GC overhead eventually
            */
        }
    }

    var _HttpServer = this
}