let PI = 3.141592653589793;
let SOLAR_MASS = PI * PI * 4;
let DAYS_PER_YEAR = 365.24;

let bodies = {
   jupiter: [
      4.84143144246472090e+00,
      -1.16032004402742839e+00,
      -1.03622044471123109e-01,
       1.66007664274403694e-03 * DAYS_PER_YEAR,
       7.69901118419740425e-03 * DAYS_PER_YEAR,
       -6.90460016972063023e-05 * DAYS_PER_YEAR,
      9.54791938424326609e-04 * SOLAR_MASS,
   ],

   saturn: [
      8.34336671824457987e+00,
      4.12479856412430479e+00,
      -4.03523417114321381e-01,
       -2.76742510726862411e-03 * DAYS_PER_YEAR,
       4.99852801234917238e-03 * DAYS_PER_YEAR,
       2.30417297573763929e-05 * DAYS_PER_YEAR,
       2.85885980666130812e-04 * SOLAR_MASS,
   ],

   uranus: [
      1.28943695621391310e+01,
      -1.51111514016986312e+01,
      -2.23307578892655734e-01,
       2.96460137564761618e-03 * DAYS_PER_YEAR,
       2.37847173959480950e-03 * DAYS_PER_YEAR,
       -2.96589568540237556e-05 * DAYS_PER_YEAR,
       4.36624404335156298e-05 * SOLAR_MASS,
   ],

   neptune: [
      1.53796971148509165e+01,
      -2.59193146099879641e+01,
      1.79258772950371181e-01,
       2.68067772490389322e-03 * DAYS_PER_YEAR,
       1.62824170038242295e-03 * DAYS_PER_YEAR,
       -9.51592254519715870e-05 * DAYS_PER_YEAR,
       5.15138902046611451e-05 * SOLAR_MASS,
   ],

   sun: [
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      SOLAR_MASS,
   ]
}

let px = 0.0
let py = 0.0
let pz = 0.0

for bodies do (name, body) => {
   px += body[3] * body[6]
   py += body[4] * body[6]
   pz += body[5] * body[6]
}

bodies.sun[3] = -px / SOLAR_MASS
bodies.sun[4] = -py / SOLAR_MASS
bodies.sun[5] = -pz / SOLAR_MASS

def energy() => {
   let dx = 0.0
   let dy = 0.0
   let dz = 0.0
   let distance = 0.0
   let e = 0.0
   let bb = keys(bodies)

   for 0..len(bb) do (i) => {
      let body = bodies[bb[i]]
      e += 0.5 * body[6] * (body[3] * body[3] + body[4] * body[4] + body[5] * body[5])

      for i+1..len(bb) do (j) => {
         let jBody = bodies[bb[j]]
         dx = body[0] - jBody[0]
         dy = body[1] - jBody[1]
         dz = body[2] - jBody[2]

         distance = Math.sqrt(dx*dx + dy*dy + dz*dz)
         e -= ((body[6] * jBody[6]) / distance)
      }
   }

   e
}

let bb = keys(bodies)
let lbb = len(bb) 

def advance(dt) => {
   for 0..lbb do (i) => {
      let iBody = bodies[bb[i]]

      for i+1..lbb do (j) => {
         let jBody = bodies[bb[j]]

         let dx = iBody[0] - jBody[0];
         let dy = iBody[1] - jBody[1];
         let dz = iBody[2] - jBody[2];

         let dSquared = dx * dx + dy * dy + dz * dz;
         let distance = Math.sqrt(dSquared);
         let mag = dt / (dSquared * distance);

         let jmass_mag = jBody[6] * mag
         let imass_mag = iBody[6] * mag

         iBody[3] -= dx * jmass_mag
         iBody[4] -= dy * jmass_mag
         iBody[5] -= dz * jmass_mag
         jBody[3] += dx * imass_mag
         jBody[4] += dy * imass_mag
         jBody[5] += dz * imass_mag
      }
   }

   for bodies do (i, body) => {
      body[0] += dt * body[3];
      body[1] += dt * body[4];
      body[2] += dt * body[5];
   }
}

let _start = Time.unix(0)
println(energy())
for 0..5000000 do () => {
   advance(0.01)
}
println(energy())
println(Time.unix(0) - _start)

// let tmp = [1,2,3]
// tmp[1] += 2
// println(tmp)