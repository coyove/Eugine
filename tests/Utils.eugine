import Cookie

(def Util() => {
    var javaURLDecoder = static java/net/URLDecoder
    var javaURLEncoder = static java/net/URLEncoder
    var thisUtil = this

    def this.encodeURI (text) => 
        javaURLEncoder::encode(text : String, "utf-8" : String)

    def this.decodeURI (text) => 
        javaURLDecoder::decode(text : String, "utf-8" : String)

    def this.startsWith (text, prefix) =>
        if len(text) < len(prefix)
            false
        else 
            text[0..len(prefix)] == prefix

    def this.randomString(length) => {
        var table = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
        var ret = ""
        for 0..length do () => 
            ret += table[Math.floor(Math.random(0) * 58)]

        ret
    }

    def this.hashString(text) =>
        Digest.hexSHA1(Digest.SHA256(text + Config.salt))

    def this.struct (f, args...) => sync {
        f(args...)
        clone f
    }

    def this.isEndOfStream (stream) => {
        var length = len(stream);

        (stream[length - 1] == "\n" && stream[length - 3] == "\n") &&
        (stream[length - 2] == "\r" && stream[length - 4] == "\r")
    }

    def this.getRss (url) => {
        var now = Time.unix(1)
        var ret = ""
        
        enter if contains(rssCache, url) && (now - rssCache[url].updated < 2000) {
            println("cache hit: ", url)
            ret = rssCache[url].rss
        } else {
            var obj = new java/net/URL(url : String)
            var conn = obj::openConnection()

            // error when url is invalid
            var br = new java/io/BufferedReader(
                new java/io/InputStreamReader(conn:>getInputStream(): java/io/InputStream): java/io/Reader)

            var inputLine = "", response = new java/lang/StringBuffer()

            for (inputLine = br::readLine()) != null do () =>
                response:>append(inputLine : String)

            br:>close()
            var rss = response::toString()

            rssCache[url] = { updated: Time.unix(1), rss : rss }
            ret = rss
        } do ret
    }
})()