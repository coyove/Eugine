import java
import encode.digest

eval("Cookie.eugine")

(def Util() => {
    var seu = java.class("org.apache.commons.lang3.StringEscapeUtils")

    def this.encodeURI (text) => java.class("java.net.URLEncoder").encode(text, "utf-8")

    def this.decodeURI (text) => java.class("java.net.URLDecoder").decode(text, "utf-8")

    def this.filterString (text) => encodeURI(seu.escapeHtml3(text))

    def this.filterName (name) => {
        name = seu.escapeHtml3(name.replace("!", "_"))

        if contains(name, "#") > -1 {
            var names = name.split("#")

            if Config.mods[names[0]] == names[1] {
                name = "<span mod>" + names[0] + "</span>"
            } else {
                name = names[0] + "<span tripcode>!" + Util.hashString2(names[1])[0,4] + "</span>"
            }
        }

        encodeURI(name)
    }

    def this.filterComment (text) => @ret("") {
        text = seu.escapeHtml3(text)

        var lines = text.split("\n")
        var codeFlag = false
        def replacer (t) => {
            t = t.replace(@"(https?:\/\/\S+)", "<a class='link' href='$1' target='_blank'>$1</a>", "r")
            t = t.replace(@"&gt;&gt;No\.(\d+)",
"<a class='aref' onmouseover='openref($1, this)' onmouseout='closeref($1, this)' href='javascript:open($1)'>&gt;&gt;No.$1</a>", "r")
            t.replace(@"^&gt;(.+)", "<span quote>&gt;$1</span>", "r")
        }

        var tooManyLines = false
        for lines do (line, i) => {

            if line.trimmed == "```" { 
                codeFlag = !codeFlag

                if codeFlag
                    ret <+ "<pre><code>"
                else
                    ret <+ "</pre></code>"
            } else if codeFlag {
                if i >= Config.tooManyLines && !tooManyLines {
                    tooManyLines = true
                    ret <+ "</pre></code><div class='tml'><pre><code>"
                }
                ret <+ line <+ "\n"
            } else {
                if i >= Config.tooManyLines && !tooManyLines {
                    tooManyLines = true
                    ret <+ "<div class='tml'>"
                }
                ret <+ "<span>" <+ replacer(line) <+ "</span><br>"
            }
        }

        if tooManyLines {
            ret <+ "</div>"
        }

        ret = encodeURI(ret)
    }

    def this.makeDir (path) => {
        var p = java.class("java.nio.file.Paths").get(path)
        
        if !file.exists(path) {
            java.class("java.nio.file.Files").createDirectories(p)
        }

        path
    }

    def this.makeFile (path, initData) => {
        if !file.exists(path) file.write(path, initData)
        path
    }

    def this.startsWith (text, prefix) =>
        if len(text) < len(prefix)
            false
        else 
            text[0,len(prefix)] == prefix

    def this.endsWith (text, suffix) =>
        if (var tl = len(text)) < (var sl = len(suffix))
            false
        else 
            text[(tl-sl),tl] == suffix

    def this.randomString(length) => {
        var table = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
        var ret = ""
        for 0,length do () => 
            ret += table[math.floor(math.random(0) * 58)]

        ret
    }

    def this.hashString(text) => digest.sha1(digest.sha256(text + Config.salt), "hex")

    def this.hashString2(text) => digest.sha1(digest.sha256(digest.sha256(text + Config.salt)), "hex")

    def this.isEndOfStream (stream) => {
        var length = len(stream);

        (stream[length - 1] == "\n" && stream[length - 3] == "\n") &&
        (stream[length - 2] == "\r" && stream[length - 4] == "\r")
    }

    def this.trimIP(ip) => {
        if contains(ip, ":") > -1 {
            var parts = ip.split(":") // buggy, abbreviation is not considered
            ".".join(parts[0,len(parts)/2])
        } else {
            var parts = ip.split(".")
            ".".join(parts.init)
        }
    }

    def this.rebuildPage(page, title, source) => {
        var threads = []

        if page == 1 {
            var sticky = file.read(stickyPath, "l")
            for sticky do (id) => {
                var path = dataPath + math.floor(num(id) / 1000) + "/" + id

                if file.exists(path) {
                    var thread = ThreadInTimeline(file.read(path, "l"))
                    thread.main.isSticky = true
                    threads <+ thread
                }
            }
        }

        var timeline = file.read(source, "l")
        
        if len(timeline) > 500 {
            timeline = timeline[0,500]
            file.write(source, timeline)
        }

        var total = len(timeline)
        var start = (page - 1) * Config.threadsPerPage
        var end = page * Config.threadsPerPage
        var html = ""

        if total > start {
            if total < end end = total

            for start,end do (i) => {
                var id = num(timeline[i])
                var path = dataPath + math.floor(id / 1000) + "/" + id

                if file.exists(path) {
                    var data = file.read(path, "l")
                    threads <+ ThreadInTimeline(data)
                }
            }
        }


        Template.renderTimeline(page, title, threads)
    }

    def this.deleteAllCache() => {
        for 1,21 do (i) => {
            file.delete(dataPath + i + ".html")
            file.delete(dataPath + i + ".report.html")
        }
    }
})()