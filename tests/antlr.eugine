// def Point (x, y, z) = {
// 	var this.x = x
// 	var this.y = y
// 	var this.z = z
// 	this
// }

// def Face (points...) = {
// 	var this.points = points
// 	this
// }

// var dxfHelper = static org\coyove\dxf\Helper
// var doc = dxfHelper::openDxf(__path__ + "/jm.dxf" : String)
// var boundary = dxfHelper::getHatch(doc : org\kabeja\dxf\DXFDocument, "main_block" : String)

// var points = []
// for boundary do (point) => {
// 	var x = point::getX()
// 	var y = point::getY()
// 	var p = clone Point(x, y, 0)
// 	points += p
// }

// var extrude_length = 1000
// var faces = [ (clone Face(explode(points))) ]

// for 0..len(points)-1 do (i) => {
// 	var p1 = points[i]
// 	var p2 = points[i + 1]
// 	var p3 = clone Point(p2.x, p2.y, -extrude_length)
// 	var p4 = clone Point(p1.x, p1.y, -extrude_length)

// 	println(p1.z, p2.z, p3.z, p4.z)

// 	var f = (clone Face(p1, p2, p3, p4))
// 	faces += f
// }

// for faces do (face) => {
// 	print("[")
// 	for face.points do (point) => {
// 		print("[", point.x, ",", point.y, ",", point.z, "],")
// 	}
// 	println("],")
// }

def struct (f, args...) => {
	f(args...)
	clone f
}

def [struct] IfcModel (source) => {
	var this.helper = static org\coyove\ifc\Model
	var this.model = this.helper::load(source : String)

	def this.find (class) => 
		switch class[0] do {
			"." => this.helper::getObjectsByType(this.model : ifc2x3javatoolbox\ifcmodel\IfcModel, class[1..]:String)
			"#" => this.model::getIfcObjectByID(class[1..]:String)
		}

	def this.newGUID () => this.helper::newRandomGUID()

	var __curUsingObj

	def this.using (refObj, f) => (args...) => {
		__curUsingObj = refObj
		f(args...)
	}

	def this.grid_populate(h, v, hparts, vparts, f, args...) => {
		f(args...)

		var hstep = h / hparts
		var vstep = v / vparts

		for 0..hparts do (h) =>
			for 0..vparts do (v) => {
				this.helper::createVolume(
					this.model : ifc2x3javatoolbox\ifcmodel\IfcModel,
					__curUsingObj : ifc2x3javatoolbox\ifc2x3tc1\IfcBuildingElementProxy,
					"p" + h + "-" + v : String,
					"" : String,
					h * hstep + args[0] : double,
					v * vstep + args[1] : double,
					args[2] : double
				)
			} 
	}

	def this.write(path) => {
		this.model::writeStepfile((new java\io\FileOutputStream(path : String)) : java\io\OutputStream)
	}
}

var model = IfcModel("src/main/java/org/coyove/ifc/floor.ifc")
var volume = model.find(".IfcBuildingElementProxy")[0]

def [model.grid_populate(100000, 100000, 10, 10)]  
	[model.using(volume)]
	generateAt (x, y, z) => null

generateAt(0, 0, 10000)
model.write("new.ifc")
