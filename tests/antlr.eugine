// def Point (x, y, z) = {
// 	var this.x = x
// 	var this.y = y
// 	var this.z = z
// 	this
// }

// def Face (points...) = {
// 	var this.points = points
// 	this
// }

// var dxfHelper = static org\coyove\dxf\Helper
// var doc = dxfHelper::openDxf(__path__ + "/jm.dxf" : String)
// var boundary = dxfHelper::getHatch(doc : org\kabeja\dxf\DXFDocument, "main_block" : String)

// var points = []
// for boundary do (point) => {
// 	var x = point::getX()
// 	var y = point::getY()
// 	var p = clone Point(x, y, 0)
// 	points += p
// }

// var extrude_length = 1000
// var faces = [ (clone Face(explode(points))) ]

// for 0..len(points)-1 do (i) => {
// 	var p1 = points[i]
// 	var p2 = points[i + 1]
// 	var p3 = clone Point(p2.x, p2.y, -extrude_length)
// 	var p4 = clone Point(p1.x, p1.y, -extrude_length)

// 	println(p1.z, p2.z, p3.z, p4.z)

// 	var f = (clone Face(p1, p2, p3, p4))
// 	faces += f
// }

// for faces do (face) => {
// 	print("[")
// 	for face.points do (point) => {
// 		print("[", point.x, ",", point.y, ",", point.z, "],")
// 	}
// 	println("],")
// }

// var ifcHelper = static org\coyove\ifc\Model
// var model = ifcHelper::load("C:/Users/coyove/Documents/Webvit/floor.ifc":String)

// def modelHandler (model, f, x, args...) => {
// 	var f.model = model
// 	println(args)
// }

// def [modelHandler(model)] find(x, class) => {
// 	println(2, x, class)
// 	println(ifcHelper::getObjectsByType(this.model : ifc2x3javatoolbox\ifcmodel\IfcModel, class : String))	
// }

// hello("zzz")
// greatly((name) => println("haha"))(null)

// find("zzz", "IfcBuildingElementProxy

def modelHandler (f, x, args...) => {
	println(args)
}

modelHandler(find)(1,2)