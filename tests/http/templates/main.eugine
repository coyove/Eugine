(struct Template "HTML Templates"
	[::site-name := Config::site-name]
	[::make-header := (lambda (context title)
		(join-string (~include "header.html") "")
	)]

    [::build-posts := (lambda (posts)
        (var table clone "<div class='lister'>")
        (var zebra false)
        (roop posts [(post) =>
            (+. table
"<div class='item item-" (str (set zebra (not zebra))) "'>
    <div class='title'><a href='/item/" post::id "'>" post::title "</a></div>
    <div class='info'>" post::comments " comments" (if [post::comments > 0] (+ " (" (pretty-date post::commented-ts) " ago)")) " | " post::points " points | "
            "by <a href='/user/" post::Author "'>" post::Author "</a> "
            "at " (pretty-date post::created-ts) " ago</div>
</div>")
        ])
        (+. table "</div>")
        (table)
    )]

    [::build-posts2 := (lambda (posts)
        (var table clone "<div class='lister'>")
        (var zebra false)
        (roop posts [(post) =>
            (+. table
"<div class='item item-" (str (set zebra (not zebra))) "'>
    <div class='title'>" post::title "</div>
    <div class='info'>" post::comments " comments" (if [post::comments > 0] (+ " (" (pretty-date post::commented-ts) " ago)")) " | " post::points " points | "
            "by <a href='/user/" post::Author "'>" post::Author "</a> "
            "at " (pretty-date post::created-ts) " ago | <a href='/item/" post::id "'>view</a></div>
</div>")
        ])
        (+. table "</div>")
        (table)
    )]

    [::build-pager := (lambda (start size)
        (var ppp Config::posts-per-page)
        (var prev - start ppp)
        (var next + start ppp)
        (var ret "<div class='banner'>")
        
        (if [prev >= 0]
            (set ret + ret "<a class='nav' href='?after=" (str prev) "'>&laquo; prev</a>"))

        (set ret + ret "<a class='nav' href='?after=" (str next) "'>next &raquo;</a>")

        (+ ret "</div>")
    )]

	[::index := (lambda (context posts start)
        (var index (join-string (~include "index.html") ""))
        (var footer (join-string (~include "footer.html") ""))

        (+ (::make-header context "Index") (sprintf index (::build-posts posts)) footer)
    )]

    [::item := (lambda (context item comments start)
        (var item-page (join-string (~include "item.html") ""))
        (var footer (join-string (~include "footer.html") ""))

        (+ (::make-header context item::Title) (sprintf item-page (::build-posts2 comments)) footer)
    )]

	[::submit := (lambda (context)
        (var submit (join-string (~include "submit.html") ""))
        (var footer (join-string (~include "footer.html") ""))

        (+ (::make-header context "Submit") submit footer)
     )]

	[::login := (lambda (context)
        (var login (join-string (~include "login.html") ""))
        (var footer (join-string (~include "footer.html") ""))

        (+ (::make-header context "Log in") login footer)
    )]

	[::welcome := (lambda (context)
        (var welcome (join-string (~include "welcome.html") ""))
        (var footer (join-string (~include "footer.html") ""))

        (+ (::make-header context "Welcome") (sprintf welcome context::username) footer)
    )]

    [::member-info := (lambda (context user-data)
        (var sign-up (num [user-data : UserOp::SIGN_UP_TS]))
        (var age / [(time 1) - sign-up] 86400000)
        (var username [user-data : UserOp::USERNAME])
        (var member-info (join-string (~include "member.html") ""))
        (var footer (join-string (~include "footer.html") ""))

        (+ (::make-header context username) member-info footer)
    )]

    [::user-info := (lambda (context user-data)
        (var sign-up (num [user-data : UserOp::SIGN_UP_TS]))
        (var age / [(time 1) - sign-up] 86400000)
        (var user-info (join-string (~include "user.html") ""))
        (var footer (join-string (~include "footer.html") ""))

        (+ (::make-header context "User") user-info footer)
    )]

    [::lister := (lambda (context posts start)
        (var list-page (join-string (~include "list.html") ""))
        (var footer (join-string (~include "footer.html") ""))

        (+ (::make-header context "User") (sprintf list-page (::build-posts posts)) footer)
    )]

    [::error := (lambda (context text)
        (var footer (join-string (~include "footer.html") ""))

        (+ (::make-header context "Error") "<div class='error'>" text "</div>" footer)
    )]

    [::warning := (lambda (context text)
        (var footer (join-string (~include "footer.html") ""))

        (+ (::make-header context "Warning") "<div class='warning'>" text "</div>" footer)
    )]
)