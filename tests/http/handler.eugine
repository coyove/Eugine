(~include "templates/main.eugine")

(struct HTTP-Handler "handler"
    ;; GET
	[::index := (lambda (context)
		(context::write-common 200 @html)
		(context::write "\r\n")
		(context::write (Template::index context))
	)]

    ;; GET
	[::error := (lambda (context text...)
		(context::write-common 400 @html)
		(context::write "\r\n")
		(context::write (Template::error context (+ (explode text))))
	)]

    ;; POST
	[::post := (lambda (context)
		(sync (try {
			(if [context::username == null] (exit 99))

			(var title [context::post : @title])
			(if [(len title) > 128] (exit 30))
			(if [(len title) < 8] (exit 33))

			(var url [context::post : @url])
			(var submit-url (and [url != null] [url != ""]))
			(var text [context::post : @text])
			(var submit-text (and [text != null] [text != ""]))

			(if [(len url) > 256] 							(exit 31))
			(if [(len text) > 1024] 						(exit 32))
			(if [submit-url and [(len url) < 10]] 			(exit 34))
			(if [submit-text and [(len text) < 10]] 		(exit 35))
			(if (and (not submit-url) (not submit-text)) 	(exit 36))

			(if submit-url {
				(var domain extract-domain url)
				(if [domain == null] (exit 37))
				(set domain replace domain "://" "#")
				(make-dir (var site-path (+ ~path "data/sites/" domain)))
			})

			(if submit-text {
				(make-dir (var site-path (+ ~path "data/sites/common")))
			})
		} ()
		(cond ~e 
			(99 (::error context "Please login first"))
			(30 (::error context "Title too long (128 chars max.)\n" title))
			(33 (::error context "Title too short (8 chars min.)\n" title))
			(31 (::error context "URL too long (256 chars max.)\n" url))
			(34 (::error context "URL too short (10 chars min.)\n" url))
			(32 (::error context "Text too long (1024 chars max.)\n" text))
			(35 (::error context "Text too short (10 chars min.)\n" text))
			(36 (::error context "You should submit either an URL or some text"))
			(37 (::error context "Invalid URL\n" url))
			(_ 
				(context::write-common 302 @plain)
				(context::write-header "Location" "/")
				(context::write "\r\n")
			)
		)))
	)]

    ;; GET
	[::submit := (lambda (context)
		(context::write-common 200 @html)
		(context::write "\r\n")

		(context::write (Template::submit context))
	)]

    ;; GET
	[::user := (lambda (context)
		(if [context::username == null]
			(::user-login context)
			{
			    (var dir UserOp::get-dir context::username)
                (var user-data read-file-lines (+ dir "/data"))
                (context::write-common 200 @html)
                (context::write "\r\n")
                (context::write (Template::member-info context user-data))
			})
	)]

        ;; GET
		[::user-login := (lambda (context)
			(context::write-common 200 @html)
			(context::write "\r\n")

			(context::write (Template::login context))
		)]

        ;; POST
		[::signup := (lambda (context)
			(try {
				(var username [context::post : @username])
				(if [(len username) > 32] (exit 30))
				(if [(len username) < 4] (exit 31))
				(if (not (UserOp::valid-username username)) (exit 40))

				(var password [context::post : @password])
				(if [(len password) > 32] (exit 32))
				(if [(len password) < 8] (exit 33))

				(var dir (+ ~path "data/users/" [username : 0] "/" username))
				(if (file-exists dir) (exit 34))

				(sync
				    (var next-id + 1 (num (read-file (+ ~path "data/users/index"))))
				    (write-file (+ ~path "data/users/index") (str next-id))
				)

				(make-dir dir)
				(write-file (+ dir "/data") (list
				    (str next-id)           ; member id
				    (hash-string password)  ; password
				    (str (floor (time 1)))  ; sign up ts
				    (str (floor (time 1)))  ; last login ts
				    context::ip             ; ip when signed up
				    context::ip             ; last login ip
				    "0"                     ; total posts
				    (str Config::new-member-karma) ; karma
				    ""                      ; about
				    ""                      ; email
				    Config::new-member-group; member group
				    " "                     ; add trail
				))

                (var session (UserOp::generate-token username))
                (write-file (+ dir "/session") session)

				(context::write-common 302 @plain)
				(context::write-header "Location" "/welcome")
				(context::write-cookie "uid" session (dict ("Expires" 31536000)))
				(context::write "\r\n")
			}

			(cond ~e 
				(30 (::error context "Username too long (32 chars max.)\n" username))
				(31 (::error context "Username too short (4 chars min.)\n" username))
				(40 (::error context "Username contains non-alphanumeric chars\n" username))
				(32 (::error context "Password too long (32 chars max.)\n" password))
				(33 (::error context "Password too short (8 chars min.)\n" password))
				(34 (::error context "User already existed\n" username))
				(_ ())
			))
		)]

        ;; POST
		[::login := (lambda (context)
			(try {
				(var username [context::post : @username])
				(if (or (eq username null) [(len username) < 4]) (exit 30))

				(var password [context::post : @password])
				(if (eq password null) (exit 31))
				
				(var dir UserOp::get-dir username)
				(if (not (file-exists dir)) (exit 32))

                (var user-data (read-file-lines (+ dir "/data")))
				(if [[user-data : UserOp::PASSWORD] != (hash-string password)] (exit 33))

				(set [user-data : UserOp::LAST_LOGIN_TS] (str (time 1)))
				(set [user-data : UserOp::LAST_LOGIN_IP] context::ip)
				(write-file (+ dir "/data") user-data)

				(var session (UserOp::generate-token username))
				(write-file (+ dir "/session") session)

				(context::write-common 302 @plain)
				(context::write-cookie "uid" session (dict ("Expires" 31536000)))
				(context::write-header "Location" "/welcome")
				(context::write "\r\n")
			}

			(cond ~e 
				(30 (::error context "Invalid username"))
				(31 (::error context "Invalid password"))
				(32 (::error context "Wrong username"))
				(33 (::error context "Wrong password"))
				(_ ())
			))
		)]

        ;; GET
        [::logout := (lambda (context)
            (try {
                (if [context::username == null] (exit 30))

                (var session (UserOp::generate-token context::username))
                (var dir UserOp::get-dir context::username)
                (write-file (+ dir "/session") session)

                (context::write-common 302 @plain)
                (context::write-header "Location" "/")
                (context::write "\r\n")
            }

            (cond ~e
                (30 (::forbidden context))
                (_ ())
            ))
        )]

        ;; GET
		[::welcome := (lambda (context)
			(context::write-common 200 @html)
			(context::write "\r\n")

			(context::write (Template::welcome context))
		)]	

	[::not-found := (lambda (context)
		(context::write-common 404 @html)
		(context::write "\r\n")
		(context::write "404 Page Not Found")
	)]

	[::forbidden := (lambda (context)
		(context::write-common 403 @html)
		(context::write "\r\n")
		(context::write "403 Forbidden")
	)]

	[::serve-file := (lambda (context)
		(var uri-ends ends-with context::route)
		(var path (sub context::route 1))
		(cond true
			((uri-ends ".js") 
				(context::write-common 200 @js)
				(context::write "\r\n")
				(context::write-bytes (read-file-binary (+ ~path path)))
			)
			((uri-ends ".css") 
				(context::write-common 200 @css)
				(context::write "\r\n")
				(context::write-bytes (read-file-binary (+ ~path path)))
			)
			(_
				(::not-found context)
			)
		)
	)]
)