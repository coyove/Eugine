(~include "templates/main.eugine")

(struct HTTP-Handler "handler"
    ;; GET
	[::index := (lambda (context)
		(context::write-common 200 @html)
		(context::write "\r\n")

		(try {
			(var newest (num (read-file (+ ~path "data/posts/main-index"))))
			(var gap / newest 1000)
			(var ppp Config::posts-per-page)
			(var posts (list))

			(loop [ppp > 0] [() =>
			    (var data (read-file-lines (+ ~path "data/posts/" (str gap) "/list")))
			    (if [data == null] (exit 30))

                (var tmp (take-last-n data ppp))
                (+. posts (explode tmp))

                [ppp -= (len tmp)]
                (-- gap)
			])
		})

        (try {
            (loop posts [(post i) =>
                (var parts (split post " "))
                (if [(len parts) != 9] (exit 30))

                (set [posts : i] clone Post (explode parts))
            ])
        } () (cond ~e
            (30 (::error context "Corrupted index file"))
            (_ (context::write (Template::index context posts)))
        ))
	)]

    ;; GET
	[::error := (lambda (context text...)
		(context::write-common 400 @html)
		(context::write "\r\n")
		(context::write (Template::error context (+ (explode text))))
	)]

    ;; POST
	[::post := (lambda (context id)
		(sync (try {
			(var id num id)
			(if [id == null] (exit 31))

			(if [context::username == null] {
					(var is-anonymous true)
					(var author + "!" (random-string 8))
					(var anonymous-token (UserOp::generate-token2 author))
				} 
				(var author context::username))

			(var title [context::post : @title])
			(if [(len title) > 128] (exit 30))
			(if [[title == null] or [title == ""]] (set title "Untitled"))

			(var text [context::post : @text])
			(if [(len text) > 4096]	(exit 32))
			(if [(len text) < 10] 	(exit 35))

			(var next-id get-next-id (+ ~path "data/posts/index"))
			(if [id == 0] (write-file (+ ~path "data/posts/main-index") (str id)))

			(~include "post.eugine")

			(context::write-common 302 @plain)
			(context::write-header "Location" "/")
			(if (eq is-anonymous true) 
				(context::write-cookie "uid" anonymous-token Config::cookie-options))
			(context::write "\r\n")
		} ()
		(cond ~e 
			(30 (::error context "Title too long (128 chars max.)\n" title))
			(31 (::error context "Invalid ID"))
			(32 (::error context "Text too long (4096 chars max.)\n" text))
			(35 (::error context "Text too short (10 chars min.)\n" text))
			(_ ())
		)))
	)]

    ;; GET
	[::submit := (lambda (context)
		(context::write-common 200 @html)
		(context::write "\r\n")

		(context::write (Template::submit context))
	)]

    ;; GET
	[::user := (lambda (context)
		(if [[context::username == null] or [[context::username : 0] == "!"]]
			(::user-login context)
			{
			    (var f UserOp::get-data-path context::username)
                (var user-data read-file-lines f)
                (context::write-common 200 @html)
                (context::write "\r\n")
                (context::write (Template::member-info context user-data))
			})
	)]

    ;; GET
	[::user-login := (lambda (context)
		(context::write-common 200 @html)
		(context::write "\r\n")
		(context::write (Template::login context))
	)]

    ;; POST
	[::signup := (lambda (context)
		(try {
			(var username [context::post : @username])
			(if [(len username) > 32] (exit 30))
			(if [(len username) < 4] (exit 31))
			(if (not (UserOp::valid-username username)) (exit 40))

			(var password [context::post : @password])
			(if [(len password) > 32] (exit 32))
			(if [(len password) < 8] (exit 33))

			(var f (UserOp::get-data-path username))
			(if (file-exists f) (exit 34))

			(sync (var next-id get-next-id (+ ~path "data/users/index")))

			(make-dir (+ ~path "data/users/" [username : 0]))

			(var session (UserOp::generate-token username))
			(write-file f (list
			    (str next-id)           ; member id
			    (hash-string password)  ; password
			    (str (floor (time 1)))  ; sign up ts
			    (str (floor (time 1)))  ; last login ts
			    context::ip             ; ip when signed up
			    context::ip             ; last login ip
			    "0"                     ; total posts
			    (str Config::new-member-karma) ; karma
			    " "                     ; about
			    " "                     ; email
			    Config::new-member-group; member group
			    session					; session
			    " "                     ; add trail
			))

			(context::write-common 302 @plain)
			(context::write-header "Location" "/welcome")
			(context::write-cookie "uid" session Config::cookie-options)
			(context::write "\r\n")
		}

		(cond ~e 
			(30 (::error context "Username too long (32 chars max.)\n" username))
			(31 (::error context "Username too short (4 chars min.)\n" username))
			(40 (::error context "Username contains non-alphanumeric chars\n" username))
			(32 (::error context "Password too long (32 chars max.)\n" password))
			(33 (::error context "Password too short (8 chars min.)\n" password))
			(34 (::error context "User already existed\n" username))
			(_ ())
		))
	)]

    ;; POST
	[::login := (lambda (context)
		(try {
			(var username [context::post : @username])
			(if (or (eq username null) [(len username) < 4]) (exit 30))

			(var password [context::post : @password])
			(if (eq password null) (exit 31))
			
			(var f UserOp::get-data-path username)
			(if (not (file-exists f)) (exit 32))

            (var user-data (read-file-lines f))
			(if [[user-data : UserOp::PASSWORD] != (hash-string password)] (exit 33))

			(var session (UserOp::generate-token username))
			(set [user-data : UserOp::LAST_LOGIN_TS] (str (time 1)))
			(set [user-data : UserOp::LAST_LOGIN_IP] context::ip)
			(set [user-data : UserOp::SESSION] session)
			(write-file f user-data)

			(context::write-common 302 @plain)
			(context::write-cookie "uid" session Config::cookie-options)
			(context::write-header "Location" "/welcome")
			(context::write "\r\n")
		}

		(cond ~e 
			(30 (::error context "Invalid username"))
			(31 (::error context "Invalid password"))
			(32 (::error context "Wrong username"))
			(33 (::error context "Wrong password"))
			(_ ())
		))
	)]

    ;; GET
    [::logout := (lambda (context)
        (try {
            (if [context::username == null] (exit 30))
            (if [[context::username : 0] == "!"] (exit 31))

            (var session (UserOp::generate-token context::username))
            (var f UserOp::get-data-path context::username)
            (var lines read-file-lines f)
            (set [lines : UserOp::SESSION] session)
            (write-file f lines)

            (context::write-common 302 @plain)
            (context::write-header "Location" "/")
            (context::write "\r\n")
        }

        (cond ~e
            (30 (::forbidden context))
            (31
            	(context::write-common 302 @plain)
            	(context::write-header "Location" "/")
            	(context::write-cookie "uid" "" Config::cookie-options)
            	(context::write "\r\n"))
            (_ ())
        ))
    )]

    ;; GET
	[::welcome := (lambda (context)
		(context::write-common 200 @html)
		(context::write "\r\n")

		(context::write (Template::welcome context))
	)]	

	[::not-found := (lambda (context)
		(context::write-common 404 @html)
		(context::write "\r\n")
		(context::write "404 Page Not Found")
	)]

	[::forbidden := (lambda (context)
		(context::write-common 403 @html)
		(context::write "\r\n")
		(context::write "403 Forbidden")
	)]

	[::serve-file := (lambda (context)
		(var uri-ends-in ends-with context::route)
		(var path + ~path (sub context::route 1))
		(if (file-exists path)
			{
				(cond true
					((uri-ends ".js")  (context::write-common 200 @js))
					((uri-ends ".css") (context::write-common 200 @css))
					((uri-ends ".html")(context::write-common 200 @html))
					(_                 (context::write-common 200 @binary))
				)
				(context::write "\r\n")
				(context::write-bytes (read-file-binary path))
			}
			(::not-found context))
	)]
)