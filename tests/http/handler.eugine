(~include "templates/main.eugine")
(~include "points.eugine")

(struct HTTP-Handler "handler"
    [::get-paging := (lambda (context)
        (var count num [context::post : "after"])
        
        (if [count == null] (set count 0))
        (if [count < 0] (set count 0))

        (* (+ 0 [count % Config::max-pages]) Config::posts-per-page)
    )]

    ;; GET
    [::index := (lambda (context file)
        (var count ::get-paging context)
        (if context::is-logged-in
            (var show-deleted eq [context::user-data : UserOp::SHOWDELETED] "yes")
            (var show-deleted false))

        (context::write-common 200 @html)
        (context::write "\r\n")
        (context::write (Template::lister context file show-deleted 
            (if [file == "main"] "最新" "排行")
            count "sub"))
    )]

    ;; GET
    [::user-submits-or-comments := (lambda (context username ltype)
        (var user-home UserOp::get-user-path username)
        (var path + (UserOp::get-user-path username) "/" 
            (if [ltype == "sub"] "submissions-list" "comments-list"))

        (if (not (file-exists user-home))
            (::not-found context)
            {
                (var count ::get-paging context)

                (context::write-common 200 @html)
                (context::write "\r\n")
                (context::write (Template::lister context path true
                    (+ username (if [ltype == "sub"] "'s submissions" "'s comments")) 
                    count ltype))
            })
    )]

    ;; GET
    [::favorites := (lambda (context username)
        (var user-home UserOp::get-user-path username)
        (var path UserOp::get-data-path username)

        (if (not (file-exists user-home))
            (::not-found context)
            {
                (var count ::get-paging context)

                (context::write-common 200 @html)
                (context::write "\r\n")
                (context::write (Template::lister context path true
                    (+ username "'s favorites") count "fave"))
            })
    )]

    ;; GET
    [::item := (lambda (context id)
        (try {
            (set id num id)
            (if [id == null] (exit 30))

            (var path get-post-path id)
            (if [path == null] (exit 30))

            (var data read-file-lines (+ path "/data"))
            (var raw read-file (+ path "/raw"))

            (var item Item::new id (explode data) raw)
            (var item::aye-users read-file-lines (+ path "/aye"))
            (var item::no-users read-file-lines (+ path "/no"))

            (var comments load-list (+ path "/list") -1 true)

        } () (cond ~e
            (30 (::not-found context))
            (_ 
                (context::write-common 200 @html)
                (context::write "\r\n")
                (context::write (Template::item context item comments)))
        ))
    )]

    ;; GET
    [::leaders := (lambda (context)
        (var leaders read-file-lines (+ ~path "data/users/ranking"))
        (loop leaders [(l i) => (set [leaders : i] UserListItem::new (explode (split l " ")))])

        (context::write-common 200 @html)
        (context::write "\r\n")
        (context::write (Template::leaders context leaders))
    )]

    ;; POST
    [::post := (lambda (context id)
        (sync (try {
            (if (not (check-csrf context)) (exit 100))

            (var id num id)
            (if [id == null] (exit 31))

            (if (not context::is-logged-in) (exit 99))
            (if context::user-is-locked (exit 101))

            (var author context::username)
            (if (access-slow-control context) (exit 102))

            (var title [context::post : @title])
            (if [(len title) > 256] (exit 30))
            (if [[title == null] or [(len title) < 4]] (exit 33))

            (var text [context::post : @text])
            (if [(len text) > 4096] (exit 32))
            (if [(len text) < 4]    (exit 35))

            (set text parse-code text)
            (set title parse-title title)

            (var next-id get-next-id (+ ~path "data/posts/index"))
            (if [id == 0] {
                (write-file (+ ~path "data/posts/main-index") (str next-id))
                (delete-conj-cache (+ ~path "data/posts/timeline-cache"))
            })

            (~include "post.eugine")

            (context::write-common 302 @plain)
            (context::write-header "Location" return-to)
            (context::write "\r\n")
        } (println ~ex)
        (cond ~e 
            (99 (::error context ERR-PLEASE-LOGIN))
            (100 (::error context "CSRF"))
            (101 (::error context ERR-NO-RIGHTS))
            (102 (::error context ERR-AC))
            (30 (::error context "标题过长 (最多 256 字符)"))
            (33 (::error context "标题过短 (最少 4 字符)"))
            (31 (::error context ERR-INVALID-ID))
            (32 (::error context "正文过长 (最多 4096 字符)"))
            (35 (::error context "正文过短 (最少 4 字符)"))
            (40 (::error context "父主题已被锁住"))
            (41 (::error context "父主题不存在"))
            (_ ())
        )))
    )]

    [::voters := (lambda (context id opt)
        (sync (try {
            (var id num id)
            (if [id == null] (exit 31))

            (var path get-post-path id)
            (if [path == null] (exit 31))

            (set path + path "/" opt)
            (create-if-not-exist path "")

            (context::write-common 200 @plain)
            (context::write "\r\n")
            (context::write-bytes (read-file-binary path))
        } ()
        (cond ~e 
            (31 (::error context ERR-INVALID-ID))
            (_ ())
        )))
    )]

    [::say-aye-or-no := (lambda (context id opt)
        (sync (try {
            (if (not (check-csrf context)) (exit 100))
            (if (not context::is-logged-in) (exit 30))
            (if context::user-is-locked (exit 101))
            (if (access-slow-control context) (exit 102))

            (var id num id)
            (if [id == null] (exit 31))

            (var path get-post-path id)
            (if [path == null] (exit 31))

            (var data read-file-lines (+ path "/data"))
            (if [[[data : 4] == "deleted"] or [[data : 4] == "locked"]] (exit 32))

            (var root-id num [data : 10])
            (var root-path get-post-path root-id) ;; get the root
            (if [root-path == null] (exit 31))

            (var root-data read-file-lines (+ root-path "/data"))
            (if [[[root-data : 4] == "deleted"] or [[root-data : 4] == "locked"]] (exit 32))

            (var aye-path + path "/aye")
            (var no-path + path "/no")
            (create-if-not-exist aye-path "")
            (create-if-not-exist no-path "")

            (var aye-users read-file-lines aye-path)
            (var no-users read-file-lines no-path)

            (var vote-marker + context::username "#" (str id))
            (verify-and-update-points opt aye-users no-users vote-marker [context::user-data : UserOp::KARMA])

            (write-file aye-path aye-users)
            (write-file no-path no-users)

            (recalc-points-of-item id root-id aye-users no-users)

            (if [id != root-id] {
                (var aye-path + root-path "/aye") (create-if-not-exist aye-path "")
                (var no-path + root-path "/no") (create-if-not-exist no-path "")

                (var aye-users read-file-lines aye-path)
                (var no-users read-file-lines no-path)
                (verify-and-update-points opt aye-users no-users vote-marker [context::user-data : UserOp::KARMA])

                (write-file aye-path aye-users)
                (write-file no-path no-users)
            }
                (delete-conj-cache (+ ~path "data/posts/timeline-cache"))
            )

            (delete-file (+ root-path "/comments-cache." cache-token))

            (context::write-common 302 @plain)
            (context::write-header "Location" (+ "/item/" (str root-id) "#item-" (str id)))
            (context::write "\r\n")
        } (println ~ex)
        (cond ~e 
            (100 (::error context "CSRF"))
            (101 (::error context ERR-NO-RIGHTS))
            (102 (::error context ERR-AC))
            (30 (::error context ERR-PLEASE-LOGIN))
            (31 (::error context ERR-INVALID-ID))
            (32 (::error context "无法评分"))
            (_ ())
        )))
    )]

    [::aye := (lambda (context id)
        (::say-aye-or-no context id "aye")
    )]

    [::no := (lambda (context id)
        (::say-aye-or-no context id "no")
    )]

    [::fave := (lambda (context id)
        (try {
            (if (not (check-csrf context)) (exit 100))
            (if (not context::is-logged-in) (exit 30))
            (if context::user-is-locked (exit 101))
            (if (access-slow-control context) (exit 102))

            (var id num id)
            (if [id == null] (exit 31))

            (var path get-post-path id)
            (if [path == null] (exit 31))

            (var user-path UserOp::get-data-path context::username)
            (var user-data read-file-lines user-path)

            (var favorites split [user-data : UserOp::FAVORITES] ",")
            (if [(set id-pos find-in-list favorites id) == -1]
                (insert favorites 0 (+ (str id) " : 1"))
                (del favorites id-pos))
            (set [user-data : UserOp::FAVORITES] join-string favorites ",")
            (write-file user-path user-data)

            (context::write-common 302 @plain)
            (context::write-header "Location" (+ "/favorites/" context::username))
            (context::write "\r\n")
        } ()
        (cond ~e 
            (100 (::error context "CSRF"))
            (101 (::error context ERR-NO-RIGHTS))
            (102 (::error context ERR-AC))
            (30 (::error context ERR-PLEASE-LOGIN))
            (31 (::error context ERR-INVALID-ID))
            (_ ())
        ))
    )]

    ;; POST
    [::update := (lambda (context)
        (sync (try {
            (if (not (check-csrf context)) (exit 100))

            (if (not context::is-logged-in) (exit 99))

            (var username context::username)
            (if (access-slow-control context) (exit 102))

            (var about [context::post : @about])
            (if [(len about) > 256] (exit 30))
            (if [about == null] (set about ""))

            (var email [context::post : @email])
            (if [(len email) > 64] (exit 32))
            (if [email == null] (set email ""))

            (var autohide num [context::post : @autohide])
            (if [autohide == null] (exit 33))

            (var showdel [context::post : @showdel])
            (if [showdel == null] (exit 34))

            (var user-dp UserOp::get-data-path username)
            (var user-data read-file-lines user-dp)

            (set [user-data : UserOp::ABOUT] encodeURI about)
            (set [user-data : UserOp::EMAIL] encodeURI email)
            (set [user-data : UserOp::SHOWDELETED] encodeURI showdel)
            (set [user-data : UserOp::AUTOHIDE] str autohide)

            (write-file user-dp user-data)

            (context::write-common 302 @plain)
            (context::write-header "Location" "/user")
            (context::write "\r\n")
        } ()
        (cond ~e 
            (100 (::error context "CSRF"))
            (102 (::error context ERR-AC))
            (99 (::error context ERR-PLEASE-LOGIN))
            (30 (::error context "个人描述过长 (最多 256 位)"))
            (32 (::error context "邮箱地址过长 (最多 64 位)"))
            (33 (::error context ERR-NO-RIGHTS))
            (34 (::error context ERR-NO-RIGHTS))
            (_ ())
        )))
    )]

    ;; GET
    [::delete := (lambda (context id)
        (sync (try {
            (if (not (check-csrf context)) (exit 100))

            (var id num id)
            (if (not context::is-logged-in) (exit 30))
            (if context::user-is-locked (exit 101))
            (if [id == null] (exit 31))

            (var path get-post-path id)
            (if [path == null] (exit 31))

            (var post read-file-lines (+ path "/data"))
            (if [context::username != [post : 0]]
                (if [[context::user-data : UserOp::GROUP] != "mod"]
                    (exit 32)))

            (alter-post-state post id "deleted")
            (write-file (+ path "/data") post)

            (var root-path get-post-path (var root-id (num [post : 10])))
            (delete-file (+ root-path "/comments-cache." cache-token))

            (if [id == root-id]
                (delete-conj-cache (+ ~path "data/posts/timeline-cache")))

            (var user-path UserOp::get-data-path [post : 0])
            (var user-data read-file-lines user-path)

            (var karma num [user-data : UserOp::KARMA])
            (-= karma (+ (num [post : 6]) 1)) ;; 1 karma fine
            (set [user-data : UserOp::KARMA] str karma)

            (write-file user-path user-data)

            (context::write-common 302 @plain)
            (context::write-header "Location" (+ "/item/" (str id)))
            (context::write "\r\n")
        } ()
        (cond ~e 
            (100 (::error context "CSRF"))
            (101 (::error context ERR-NO-RIGHTS))
            (30 (::error context ERR-PLEASE-LOGIN))
            (31 (::error context ERR-INVALID-ID))
            (32 (::error context ERR-NO-RIGHTS))
            (_ ())
        )))
    )]

    ;; POST
    [::lock-unlock-user := (lambda (context username)
        (sync (try {
            (if (not (check-csrf context)) (exit 100))

            (if (not context::is-logged-in) (exit 30))
            (if [[context::user-data : UserOp::GROUP] != "mod"]
                (exit 32))

            (var user-dp UserOp::get-data-path username)
            (var user-pp UserOp::get-user-path username)

            (var user-data read-file-lines user-dp)
            (if [user-data == null] (exit 31))

            (var long [context::post : @long])
            (if [[long == null] or [(num long) == 0]]
                (set long 0)
                (set long + (time 1) (num long)))

            (if [[user-data : UserOp::GROUP] == "user"]
                (set [user-data : UserOp::GROUP] + "lock-" (str long))
                (set [user-data : UserOp::GROUP] "user"))

            (write-file user-dp user-data)

            (create-if-not-exist (+ user-pp "/lock-log") "")
            (append-file (+ user-pp "/lock-log") (+ context::username "\n"))

            (context::write-common 302 @plain)
            (context::write-header "Location" (+ "/user/" username))
            (context::write "\r\n")
        } ()
        (cond ~e 
            (100 (::error context "CSRF"))
            (30 (::error context ERR-PLEASE-LOGIN))
            (31 (::error context ERR-INVALID-USER))
            (32 (::error context ERR-NO-RIGHTS))
            (_ ())
        )))
    )]

    ;; GET
    [::lock-unlock-post := (lambda (context id)
        (sync (try {
            (if (not (check-csrf context)) (exit 100))

            (if (not context::is-logged-in) (exit 30))
            (if [[context::user-data : UserOp::GROUP] != "mod"]
                (exit 32))

            (var id num id)
            (if [id == null] (exit 31))
            
            (var path get-post-path id)
            (var data read-file-lines (+ path "/data"))
            (if [[data : 4] == "open"]
                (alter-post-state data id "locked")
                (alter-post-state data id "open"))

            (write-file (+ path "/data") data)

            (var root-path get-post-path (var root-id (num [data : 10])))
            (delete-file (+ root-path "/comments-cache." cache-token))

            (if [id == root-id]
                (delete-conj-cache (+ ~path "data/posts/timeline-cache")))

            (context::write-common 302 @plain)
            (context::write-header "Location" (+ "/item/" (str id)))
            (context::write "\r\n")
        } ()
        (cond ~e 
            (100 (::error context "CSRF"))
            (30 (::error context ERR-PLEASE-LOGIN))
            (31 (::error context ERR-INVALID-ID))
            (32 (::error context ERR-NO-RIGHTS))
            (_ ())
        )))
    )]

    ;; GET
    [::submit := (lambda (context)
        (context::write-common 200 @html)
        (context::write "\r\n")

        (context::write (Template::submit context))
    )]

    ;; GET
    [::user := (lambda (context)
        (if (not context::is-logged-in)
            (::user-login context)
            {
                (context::write-common 200 @html)
                (context::write "\r\n")
                (context::write (Template::user-info context context::user-data))
            })
    )]

    ;; GET
    [::user-visitor-view := (lambda (context username)
        (var user-data read-file-lines (UserOp::get-data-path username))
        (if [user-data != null]
            {
                (context::write-common 200 @html)
                (context::write "\r\n")
                (context::write (Template::member-info context user-data))
            }
            (::not-found context))
    )]

    ;; GET
    [::user-login := (lambda (context)
        (context::write-common 200 @html)
        (context::write "\r\n")
        (context::write (Template::login context))
    )]

    ;; POST
    [::signup := (lambda (context)
        (try {
            (if (not (check-csrf context)) (exit 100))

            (var username [context::post : @username])
            (if [(len username) > 32] (exit 30))
            (if [(len username) < 4] (exit 31))
            (if (not (UserOp::valid-username username)) (exit 40))

            (var password [context::post : @password])
            (if [(len password) > 32] (exit 32))
            (if [(len password) < 8] (exit 33))

            (var f (UserOp::get-data-path username))
            (if (file-exists f) (exit 34))

            (sync (var next-id get-next-id (+ ~path "data/users/index")))

            (make-dir (+ ~path "data/users/" [username : 0] "/" username))

            (var session (UserOp::generate-token username))
            (write-file f (list
                (str next-id)           ; member id
                (hash-string password)  ; password
                (str (time 1))          ; sign up ts
                (str (time 1))          ; last login ts
                context::ip             ; ip when signed up
                context::ip             ; last login ip
                "0"                     ; total posts
                (str Config::new-member-karma) ; karma
                ""                      ; about
                ""                      ; email
                Config::new-member-group; member group
                session                 ; session
                username                ; username
                "-10"                   ; autohide points
                "yes"                   ; show deleted
                " "                     ; add trail
            ))

            (println session)
            (append-file (+ ~path "data/users/list") 
                (+ username " " (str Config::new-member-karma) " " (str (time 1)) "\n"))

            (context::write-common 302 @plain)
            (context::write-header "Location" "/welcome")
            (context::write-cookie "uid" session Config::cookie-options)
            (context::write "\r\n")
        }

        (cond ~e 
            (100 (::error context "CSRF"))
            (30 (::error context "用户名过长 (最多 32 位)"))
            (31 (::error context "用户名过短 (最少 4 位)"))
            (40 (::error context "用户名只能包含字母数字"))
            (32 (::error context "密码过长 (最多 32 位)"))
            (33 (::error context "密码过短 (最少 8 位)"))
            (34 (::error context "用户名重复"))
            (_ ())
        ))
    )]

    ;; POST
    [::login := (lambda (context)
        (try {
            (if (not (check-csrf context)) (exit 100))

            (var username [context::post : @username])
            (if (or (eq username null) [(len username) < 4]) (exit 30))
            (if (access-slow-control username) (exit 102))

            (var password [context::post : @password])
            (if (eq password null) (exit 31))
            
            (var f UserOp::get-data-path username)
            (if (not (file-exists f)) (exit 32))

            (var user-data (read-file-lines f))
            (if [[user-data : UserOp::PASSWORD] != (hash-string password)] (exit 33))

            (var session (UserOp::generate-token username))
            (set [user-data : UserOp::LAST_LOGIN_TS] (str (time 1)))
            (set [user-data : UserOp::LAST_LOGIN_IP] context::ip)
            (set [user-data : UserOp::SESSION] session)

            (if (starts-with [user-data : UserOp::GROUP] "lock-") {
                (var long num (sub [user-data : UserOp::GROUP] 5))
                (if (and [long > 0] [(time 1) > long])
                    (set [user-data : UserOp::GROUP] "user"))
            })

            (if [[user-data : UserOp::GROUP] == "mod"]
                (set [user-data : UserOp::KARMA] "4294967296"))

            (write-file f user-data)

            (context::write-common 302 @plain)
            (context::write-cookie "uid" session Config::cookie-options)
            (context::write-header "Location" "/welcome")
            (context::write "\r\n")
        }

        (cond ~e 
            (100 (::error context "CSRF"))
            (102 (::error context ERR-AC))
            (30 (::error context "无效用户名"))
            (31 (::error context "无效密码"))
            (32 (::error context "用户名错误"))
            (33 (::error context "密码错误"))
            (_ ())
        ))
    )]

    ;; GET
    [::logout := (lambda (context)
        (try {
            (if (not (check-csrf context)) (exit 100))

            (if [context::username == null] (exit 30))

            (var session (UserOp::generate-token context::username))
            (var f UserOp::get-data-path context::username)
            (var lines read-file-lines f)
            (set [lines : UserOp::SESSION] session)
            (write-file f lines)

            (context::write-common 302 @plain)
            (context::write-header "Location" "/")
            (context::write "\r\n")
        }

        (cond ~e
            (100 (::error context "CSRF error"))
            (30 (::forbidden context))
            (31
                (context::write-common 302 @plain)
                (context::write-header "Location" "/")
                (context::write-cookie "uid" "" Config::cookie-options)
                (context::write "\r\n"))
            (_ ())
        ))
    )]

    ;; POST
    [::change-password := (lambda (context)
        (try {
            (if (not (check-csrf context)) (exit 100))
            (if (not context::is-logged-in) (exit 31))

            (var old-password [context::post : @old])
            (if [old-password == null] (exit 30))

            (var new-password [context::post : @new])
            (if [(len new-password) > 32] (exit 32))
            (if [(len new-password) < 8] (exit 33))

            (var f (UserOp::get-data-path context::username))
            (if (not (file-exists f)) (exit 34))

            (var user-data read-file-lines f)
            (if [[user-data : UserOp::PASSWORD] != (hash-string old-password)] (exit 35))

            (set [user-data : UserOp::PASSWORD] hash-string new-password)
            (write-file f user-data)

            (context::write-common 302 @plain)
            (context::write-header "Location" "/user?password-changed")
            (context::write "\r\n")
        }

        (cond ~e 
            (100 (::error context "CSRF"))
            (30 (::error context "请输入旧密码"))
            (31 (::error context ERR-PLEASE-LOGIN))
            (32 (::error context "新密码过长 (最多 32 位)"))
            (33 (::error context "新密码过短 (最少 8 位)"))
            (34 (::error context ERR-INVALID-USER))
            (35 (::error context "旧密码错误"))
            (_ ())
        ))
    )]

    ;; POST
    [::reset-password := (lambda (context)
        (try {
            (if (not (check-csrf context)) (exit 100))

            (var username [context::post : @username])
            (if [username == null] (exit 30))

            (var email [context::post : @email])
            (if [email == null] (exit 31))

            (var f (UserOp::get-data-path username))
            (if (not (file-exists f)) (exit 32))

            (var user-data read-file-lines f)
            (var user-email [user-data : UserOp::EMAIL])

            (if [user-email == ""] (exit 33))
            (if [user-email != (encodeURI email)] (exit 34))

            (create-if-not-exist (+ ~path "data/reset-requests") "")
            (append-file (+ ~path "data/reset-requests") (+ username " " (str (time 1)) " " email))

            (context::write-common 302 @plain)
            (context::write-header "Location" "/user?password-reseted")
            (context::write "\r\n")
        }

        (cond ~e 
            (100 (::error context "CSRF"))
            (30 (::error context "请输入用户名"))
            (31 (::error context "请输入邮箱地址"))
            (33 (::error context "该用户没有邮箱记录"))
            (32 (::error context ERR-INVALID-USER))
            (34 (::error context "无效邮箱地址"))
            (_ ())
        ))
    )]

    ;; GET
    [::welcome := (lambda (context)
        (context::write-common 200 @html)
        (context::write "\r\n")

        (context::write (Template::welcome context))
    )]

    [::oauth-github := (lambda (context)
        (context::write-common 200 @html)
        (context::write "\r\n")
        (println context::post)
    )]

    [::not-found := (lambda (context)
        (context::write-common 404 @html)
        (context::write "\r\n")
        (context::write (Template::error context "404 Page Not Found"))
    )]

    [::forbidden := (lambda (context)
        (context::write-common 403 @html)
        (context::write "\r\n")
        (context::write "403 Forbidden")
    )]

    [::serve-file := (lambda (context)
        (var uri-ends-in ends-with context::route)
        (var path + ~path (sub context::route 1))
        (if (file-exists path)
            {
                (var send lambda () 
                    (context::write "\r\n")
                    (context::write-bytes (read-file-binary path))
                )

                (cond true
                    ((uri-ends-in ".js")  (context::write-common 200 @js) (send ()))
                    ((uri-ends-in ".css") (context::write-common 200 @css) (send ()))
                    ((uri-ends-in ".html")
                        (context::write-common 200 @html)
                        (context::write "\r\n")
                        (context::write (+ (Template::make-header context path) 
                            (read-file path)
                            (join-string (~include "templates/footer.html") "")))
                        )
                    (_  (context::write-common 200 @binary) (send ()))
                )
            }
            (::not-found context))
    )]

    ;; GET
    [::error := (lambda (context text...)
        (context::write-common 400 @html)
        (context::write "\r\n")
        (context::write (Template::error context (+ (explode text))))
    )]
)