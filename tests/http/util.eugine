(var jString (cls @java.lang.String))
(var jString. "java.lang.String")
(var jFiles (cls "java.nio.file.Files"))
(var jFile (cls "java.io.File"))
(var jPaths (cls "java.nio.file.Paths"))
(var jURLDecoder (cls "java.net.URLDecoder"))
(var jMessageDigest (cls "java.security.MessageDigest"))

(~define (sleep ~millis) [(cls @java.lang.Thread) . @sleep (list @long) ~millis])
(~define (struct ~name ~desc ~body...) ((def ~name () ~body...) ()))
(~define (sprintf ~format ~args...) 
	[jString . @format (list jString. "java.lang.Object...") ~format (list ~args...)])

(struct HTTP-Request "HTTP Request Body Struct"
   	[::data := ""]
	[::route := ""]
	[::action := ""]
	[::cookie := ""]
	[::is-logged-in := false]
	[::username := ""]

	[::parse-post-body := (lambda ()
		[::post := parse-pairs ::data "&"]
		;(println (addressof ::post))
	)]

	[::parse-cookie := (lambda ()
	    [::cookies := parse-pairs ::cookie ";"]
	)]

	(def parse-pairs (text delim)
	    (var pairs (split text delim))
	    (var ret (dict))
        (loop pairs [(pair) =>
            (var kv (split pair "="))
            (if [(len kv) == 2] {
            	(var value [jURLDecoder . @decode (list jString. jString.) (trim [kv : 1]) "utf-8"])
            	[[ret : (trim [kv : 0])] := value]
        	})
        ])

        (ret)
	)

	;; response functions
	[::response-socket := null]
	[::response-stream := null]
	[::write-common := (lambda (status ctype)
        (cond status
            (404 (::write "HTTP/1.1 404 Not Found\r\n"))
            (403 (::write "HTTP/1.1 403 Forbidden\r\n"))
            (400 (::write "HTTP/1.1 400 Bad Request\r\n"))
            (302 (::write "HTTP/1.1 302 Found\r\n"))
            (301 (::write "HTTP/1.1 301 Moved Permanently\r\n"))
            (_   (::write "HTTP/1.1 200 OK\r\n"))
        )
        (cond ctype
            (@css   (::write-header "Content-Type" "text/css; charset=utf-8"))
            (@js    (::write-header "Content-Type" "application/x-javascript; charset=utf-8"))
            (@plain (::write-header "Content-Type" "text/plain; charset=utf-8"))
            (@html  (::write-header "Content-Type" "text/html; charset=utf-8"))
            (_      (::write-header "Content-Type" "application/octet-stream"))
        )
    )]
	[::write-header := (lambda (key value) 
		(::write-bytes (buffer (+ key ": " value "\r\n")))
	)]
	[::write-cookie := (lambda (key value options)
	    (var payload (+ key "=" value))

	    (loop (keys options) [(k) => (
	        (cond k
                ("Expires"
                    (var seconds [options : k])
                    (var millis * seconds 1000)
                    (+= payload ["; Expires=" + (time-format [(time 1) + millis])])
                    (+= payload ["; Max-Age=" + (str seconds)])
                )
                ("HttpOnly"
                    (+= payload "; HttpOnly")
                )
                (_
                    (+= payload (+ "; " k "=" [options : k]))
                )
            )
	    )])

	    (::write-header "Set-Cookie" payload)
	)]
	[::write := (lambda (text...) 
		(var tmp "")
		(loop text [(t) => (+= tmp t)])
		(::write-bytes (buffer tmp))
	)]
	[::write-bytes := (lambda (bytes) 
		(if (not [::response-socket . @isClosed ()])
	    	[::response-stream call @write (list "byte[]") bytes])
	)]
	[::close := (lambda () 
		[::response-stream call @close ()]
		[::response-socket call @close ()]
	)]

	;; ctor
	[::~init := (lambda (client)
		[::headers := (dict)]
		[::post := (dict)]
		[::cookies := (dict)]
		(var ::response-socket client)
		(var ::response-stream [client . @getOutputStream ()])
	)]
)

(def starts-with (text prefix)
	(if [(len text) < (var pl (len prefix))]
		(false)
		[(sub text 0 pl) == prefix]
	)
)

(def ends-with (text suffix)
	(if [(var tl (len text)) < (var sl (len suffix))]
		(false)
		[(sub text [tl - sl]) == suffix]
	)
)

(def join-string (texts delim)
	(var ret "")
	(loop texts [(text) => (+= ret (+ text delim))])
	(ret)
)

(def socket-eos (text)
	(var length len text)
	(and 
    	(eq [text : (- length 1)] [text : (- length 3)] "\n")
    	(eq [text : (- length 2)] [text : (- length 4)] "\r"))
)

(def read-file (path)
	[jFiles call @readAllBytes (list "java.nio.file.Path") 
		[jPaths call @get (list jString. "java.lang.String...") path ()]]
)

(def read-file-lines (path)
	;Files.readAllLines(Paths.get("")).toArray();
	(var listString [jFiles call @readAllLines (list "java.nio.file.Path") 
		[jPaths call @get (list jString. "java.lang.String...") path ()]])
	[listString . @toArray ()]
)

(def write-file (path text)
	[jFiles call @write (list "java.nio.file.Path" "byte[]" "java.nio.file.OpenOption...") 
		[jPaths call @get (list jString. "java.lang.String...") path ()] (buffer text) ()]
)

(def make-dir (path)
	(var p [jPaths call @get (list jString. "java.lang.String...") path ()])
	
	(if (not (file-exists p)) (
		[jFiles . @createDirectories (list "java.nio.file.Path" "java.nio.file.attribute.FileAttribute...") p ()]
	))
)

(def file-exists (path)
	(var p path)
	(if (eq (type path) "String") (set p [jPaths call @get (list jString. "java.lang.String...") path ()]))

	[jFiles . @exists (list "java.nio.file.Path" "java.nio.file.LinkOption...") p ()]
)

(def extract-domain (url)
	(var m (match url %"(https?:\/\/[a-z0-9\.\-\:]+)"))
	(if [(len m) > 0] [m : 0 @text] null)
)

(def hash-string (s)
	(sha 1 (sha 1 (+ s Config::salt)))
)

(def bytes-to-string (bytes)
	(new jString (list "byte[]") bytes)
)

(def read-dir (path)
	(var f (new jFile (list jString.) path))
	(var ret [f . @listFiles ()])
	(loop ret [(f i) => (set [ret : i] [f . @toString ()])])
	(ret)
)

(def read-dir-files (path)
	(var f (new jFile (list jString.) path))
	(var ret [f . @listFiles ()])
	(var i [(len ret) - 1])
	(if [i == -1] () {
		(loop [i >= 0] [() => 
			(if [[ret : i] . @isDirectory ()] 
				{ (del ret i) [i -= 2]}
				[i --])
		])
		(ret) })
)