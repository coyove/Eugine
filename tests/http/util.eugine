(~define (sleep ~millis) [(cls @java.lang.Thread) . @sleep (list @long) ~millis])
(~define (struct ~name ~desc ~body...) ((def ~name () ~body...) ()))
(var jString (cls @java.lang.String))

(struct HTTP-Request "HTTP Request Body Struct"
   	[::data := ""]
	[::route := ""]
	[::action := ""]
	[::cookie := ""]

	[::parse-post-body := (lambda ()
		[::post := parse-pairs ::data]
		;(println (addressof ::post))
	)]

	[::parse-cookie := (lambda ()
	    [::cookies := parse-pairs ::cookie]
	)]

	(def parse-pairs (text)
	    (var pairs (split text "&"))
	    (var ret (dict))
        (loop pairs [(pair) =>
            (var kv (split pair "="))
            (if [(len kv) == 2] [[ret : [kv : 0]] := [kv : 1]])
        ])
        (ret)
	)

	;; response functions
	[::response-socket := null]
	[::response-stream := null]
	[::write-common := (lambda (status ctype)
        (cond status
            (404 (::write "HTTP/1.1 404 Not Found\r\n"))
            (403 (::write "HTTP/1.1 403 Forbidden\r\n"))
            (302 (::write "HTTP/1.1 302 Found\r\n"))
            (301 (::write "HTTP/1.1 301 Moved Permanently\r\n"))
            (_   (::write "HTTP/1.1 200\r\n"))
        )
        (cond ctype
            (@css   (::write-header "Content-Type" "text/css; charset=utf-8"))
            (@js    (::write-header "Content-Type" "application/x-javascript; charset=utf-8"))
            (@plain (::write-header "Content-Type" "text/plain; charset=utf-8"))
            (@html  (::write-header "Content-Type" "text/html; charset=utf-8"))
            (_      (::write-header "Content-Type" "application/octet-stream"))
        )
    )]
	[::write-header := (lambda (key value) 
		(if (not [::response-socket . @isClosed ()])
	    	[::response-stream call @write (list "byte[]") (buffer (+ key ": " value "\r\n"))])
	)]
	[::write-cookie := (lambda (key value options)
	    (var payload (+ key "=" value))

	    (loop (keys options) [(k) => (
	        (cond k
                ("Expires"
                    (var seconds [options : k])
                    (var millis * seconds 1000)
                    (+= payload ["; Expires=" + (time-format [(time 1) + millis])])
                    (+= payload ["; Max-Age=" + (str seconds)])
                )
                ("HttpOnly"
                    (+= payload "; HttpOnly")
                )
                (_
                    (+= payload (+ "; " k "=" [options : k]))
                )
            )
	    )])

	    (::write-header "Set-Cookie" payload)
	)]
	[::write := (lambda (text...) 
		(var tmp "")
		(loop text [(t) => (+= tmp t)])
		(if (not [::response-socket . @isClosed ()])
	    	[::response-stream call @write (list "byte[]") (buffer tmp)])
	)]
	[::close := (lambda () 
		[::response-stream call @close ()]
		[::response-socket call @close ()]
	)]

	;; ctor
	[::~init := (lambda (client)
		[::headers := (dict)]
		[::post := (dict)]
		[::cookies := (dict)]
		(var ::response-socket client)
		(var ::response-stream [client . @getOutputStream ()])
	)]
)

(def starts-with (text prefix)
	(if [(len text) < (var pl (len prefix))]
		(false)
		[(sub text 0 pl) == prefix]
	)
)

(def join-string (texts delim)
	(var ret "")
	(loop texts [(text) => (+= ret (+ text delim))])
	(ret)
)

(def socket-eos (text)
	(var length len text)
	(and 
    	(eq [text : (- length 1)] [text : (- length 3)] "\n")
    	(eq [text : (- length 2)] [text : (- length 4)] "\r"))
)