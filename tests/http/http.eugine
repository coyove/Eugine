(~include "util.eugine")
(~include "config.eugine")
(~include "user.eugine")
(~include "handler.eugine")

(def dispatcher (context)
	(var test-path (starts-with context::route))
	(var context::username (UserOp::valid-token [context::cookies : @uid]))
	(var context::is-logged-in neq context::username null)

	(cond true
		((eq context::route "/") 
			(HTTP-Handler::index context))
		((eq context::route "/post") 
			(HTTP-Handler::post context))
		((eq context::route "/submit") 
			(HTTP-Handler::submit context))
		((eq context::route "/user") 
			(HTTP-Handler::user context))
		((eq context::route "/login") 
			(HTTP-Handler::login context))
		((eq context::route "/logout")
            (HTTP-Handler::logout context))
		((eq context::route "/signup") 
			(HTTP-Handler::signup context))
		((eq context::route "/welcome")
			(HTTP-Handler::welcome context))
		((test-path "/assets/")
			(HTTP-Handler::serve-file context))
		(_ 
			(HTTP-Handler::not-found context))
	)
)

(def handle (client)
	[client call @setSoTimeout (list @int) Config::socket-read-timeout]
	(var is [client . @getInputStream ()])
	(var buf (buffer 1024))
    (var read           0)
    (var total-read     0)
    (var raw-request    "")
    (var body-length    0)
    (var header-length  0)
    (var total-length   0)
    
    (try 
		(loop [read != -1] [() => 
			(+= total-read (set read [is . @read (list "byte[]") buf]))
			(var output (new jString ("byte[]" "int" "int") buf 0 read))
			(+. raw-request output)

			(var m match raw-request %"(?i)content-length:\s?(\d+)")
			(if [(len m) > 0] 
				(set body-length num [(split [m : 0 @text] ":") : 1])) ; we found Content-Length header

			(set m (match raw-request %"(\r\n\r\n)"))
			(if [(len m) > 0] 
				(set total-length + (set header-length [m : 0 @end]) body-length)) ; we reach the end of HTTP request headers

	        (not (or (socket-eos output) (eq total-length total-read)))
		])
	; catch
		(if [raw-request != ""] (println "timeout:\n" raw-request))
	)

	(var requests (split [raw-request . @toLowerCase ()] "\r\n"))
	(var http-context clone HTTP-Request client)

	(loop requests [(request) =>
		(var parts (split request " "))

		(if [(len parts) > 1]
			(cond [parts : 0]
				("get" 
					(var http-context::route [parts : 1])
					(var http-context::action "get")
				)
				("post" 
					(var http-context::route [parts : 1])
					(var http-context::action "post")
				)
				("cookie:"
				    (var http-context::cookie (sub request 7))
				)
				(_
				    (var [http-context::headers : (replace [parts : 0] ":" "")] 
				    	(trim (sub request (len [parts : 0]))))
				)
			)
		)
	])

	(var http-context::data (sub raw-request header-length))
	(http-context::parse-post-body ())
	(http-context::parse-cookie ())

	(var p-ct [[http-context::headers : "content-type"] != "application/x-www-form-urlencoded"])

	(if (and [http-context::action == "post"] p-ct)
		(HTTP-Handler::forbidden http-context)
		(dispatcher http-context)
	)

	(http-context::close ())
	[is call @close ()]
)

(make-dir (+ ~path "data/posts"))
(make-dir (+ ~path "data/users"))

[ss := (new (cls @java.net.ServerSocket) (list @int) Config::port)]
(println "listening on port " Config::port)
(loop (true) [() =>
    (var client [ss . @accept ()])
    (go handle client)
])

; (struct dummy "struct"
; 	[::base := 0]
; 	[::zzz := ""]
; 	[::~init := (lambda (i)
; 		[::zzz := i]
; 	)]

; 	[::sss := (lambda ()
; 		(sleep (floor (* 1000.0 (random 0))))
; 		(str (+ ::zzz ::base))
; 	)]
; )

; (loop (range 0 100) [(i) => 
; 	(go (lambda (i)
; 		(var a clone dummy i)
; 		(println ( + (a::sss()) " "))
; 	) (i))
; ])

; (sleep 500)
; (set dummy::base 10000)