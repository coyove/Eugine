(def calc-rank (lst)
	(var idx 1)
	(var points 0.0)
	(var limit 100.0)

	(loop [idx < (len lst)] [() =>
		(var karma num [lst : idx])

		(cond true
			([karma > limit] (+= points 1.0))
			([karma > 10] (+= points (pow [karma / limit] 0.9)))
			(_ ()))

		(+= idx 2)
	])

	(floor points)
)

(def update-list (list-file id ops...)
	(var sid + (str id) " ")
    (var lines read-file-lines list-file)

    (if [lines != null]
        (loop lines [(item i) =>
            (if [item starts-with sid] {
                (var parts split item " ")

                (loop ops [(op) =>
                    (var idx [op : 0])
                    (set [parts : idx] ([op : 1] [parts : idx]))
                ])

                (set [lines : i] join-string parts " ")
            })
        ]))

	(write-file list-file lines)
)

(def recalc-points-of-item (id aye no)
	(var path get-post-path id)

	; (var aye read-file-lines (+ path "/aye"))
	(var aye-count len aye)
	(var aye-points calc-rank aye)

	; (var no read-file-lines (+ path "/no"))
	(var no-count len no)
	(var no-points calc-rank no)

	(var points (- aye-points no-points))

	;; update the item data
	(var data read-file-lines (+ path "/data"))
	(var old-points num [data : 6])
	(set [data : 6] (str points))
	(set [data : 7] (str (/ aye-count 2)))
	(set [data : 8] (str (/ no-count 2)))
	(write-file (+ path "/data") data)

	;; update item's author data
	(var user-dp UserOp::get-data-path [data : 0])
	(var user-data read-file-lines user-dp)
	(var karma num [user-data : UserOp::KARMA])
	(set [user-data : UserOp::KARMA] (str [[karma - old-points] + points]))
	(write-file user-dp user-data)

	(var user-list UserOp::get-user-path [data : 0])

	(if [[data : 9] != "0"] {
		;; update item's parent's list
		(var path get-post-path (num [data : 9]))
		(+= user-list "/comments-list")
	} {
		;; update main list
		(var path (+ ~path "data/posts/" (str (/ id 1000))))
		(+= user-list "/submits-list")
	})

	(update-list (+ path "/list") id (2 [() => (str points)]))
	(update-list user-list id (2 [() => (str points)]))
)	